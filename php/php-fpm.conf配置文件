http://php.net/manual/zh/install.fpm.configuration.php

; 约定一下,log文件通通写到/var/log/类型(nginx|php|php-fpm|mysql|redis)/级别(access|info|error...).log
; pid文件一律放到/run/类型/类型.pid

; 在php(php-fpm)配置中
; Boolean flags can be turned on using the values 1, On, True or Yes.
; They can be turned off using the values 0, Off, False or No.

如何kill掉php-fpm:
pkill php-fpm

如何平滑重启php-fpm:
kill -s USR2 `cat /run/php-fpm/php-fpm.pid`
kill -USR2 `cat /run/php-fpm/php-fpm.pid`

如何平滑重启nginx:
nginx -s reload
kill -HUP `cat /run/nginx.pid`

-------------------------------------------
/etc/php-fpm.conf
-------------------------------------------

[global]
pid = /run/php-fpm/php-fpm.pid

error_log = /var/log/php-fpm/error.log

log_level = notice

; http://www.04007.cn/article/441.html
; 如果子进程在 emergency_restart_interval 设定的时间内收到该参数设定次数的 SIGSEGV 或者 SIGBUS退出信号，则FPM会重新启动
; SIGBUS(Bus error)意味着指针所对应的地址是有效地址，但总线不能正常使用该指针。通常是未对齐的数据访问所致。
; SIGSEGV(Segment fault)意味着指针所对应的地址是无效地址，没有物理内存对应该地址。
emergency_restart_threshold = 10

; emergency_restart_interval 用于设定平滑重启的间隔时间
; Available Units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; 5分钟内收到10次异常信号就优雅的重启php-fpm
emergency_restart_interval = 300

; php进程信号复用: php-fpm作为一个调度员，会自动让空闲的FastCGI进程去处理请求，但是在分配请求给php进程前，PHP-FPM需要发送一个进程复用信号给
; FastCGI，以让FastCGI准备请求处理。但是FastCGI进程并不总是能够处理请求，也就是不能够响应进程复用信号，这个参数就表示了PHP-FPM留给FastCGI
; 进程多久时间去响应进程复用信号，如果超时PHP-FPM会选择其他的fastcgi去处理。
process_control_timeout = 10

daemonize = yes ;设置php fpm在后台运行,开放环境调试的时候可以将这个值设置为no

rlimit_files = 65535

;;;;;;;;;;;;;;;;;;;;
; Pool Definitions ;
;;;;;;;;;;;;;;;;;;;;

include /etc/php-fpm.d/*.conf

-------------------------------------------
/etc/php-fpm.d/www.conf 这里www为池名称
-------------------------------------------
[www]

user = nginx
group = nginx

; 接收fastcgi请求的地址
; 也可以配置成socket, /run/php-fpm.sock，对应的nginx配置 fastcgi_pass   unix:/run/php-fpm.sock;
; tcp在高并发的时候具有更好的稳定性
; 这里的listen会影响nginx中的配置: fastcgi_pass   127.0.0.1:9000; 这两处要保持一致
listen = 127.0.0.1:9000

; http://www.hao32.com/webserver/459.html
; No, it means that up to 511 connections can be queued in kernel listen
; queue. 511 is just a safe limit for the most OSes. For FreeBSD it’s -1,
; i.e., value of sysctl kern.ipc.somaxconn.
; May I modify it to 1024 or higher( I am sure use it less than SOMAXCONN )
; 在修改下面的值之前要修改系统内核配置(也可以直接修改配置文件/etc/sysctl.conf):
; sysctl -a | grep somaxconn，sysctl net.core.somaxconn=1024，sysctl -p
listen.backlog = 1024

; Set permissions for unix socket, if one is used.
; 为socket连接设置权限,tcp连接这里不用管
;listen.owner = _www
;listen.group = _www
;listen.mode = 0660

; Makes sense only with a tcp listening socket. Each address
; must be separated by a comma(,). If this value is left blank, connections will be
; accepted from any ip address.
; Default Value: any
; 如果没有其他服务器连接到这台机器上可以设置这个为本地地址
listen.allowed_clients = 127.0.0.1

; process manager配置
pm = dynamic
; pm.max_children可以根据内存动态调整,按照一个30M估算
pm.max_children = 80 ;这里顶峰的时候需要2.4G内存
pm.start_servers = 3
pm.min_spare_servers = 1
pm.max_spare_servers = 3
; 在请求数达到此值的时候需要重启该进程,如果没有内存溢出的话这个值应该调整大一点
pm.max_requests = 200000

; The URI to view the FPM status page. If this value is not set, no URI will be
; recognized as a status page. It shows the following informations:
;   pool                 - the name of the pool;
;   process manager      - static, dynamic or ondemand;
;   start time           - the date and time FPM has started;
;   start since          - number of seconds since FPM has started;
;   accepted conn        - the number of request accepted by the pool;
;   listen queue         - the number of request in the queue of pending
;                          connections (see backlog in listen(2));
;   max listen queue     - the maximum number of requests in the queue
;                          of pending connections since FPM has started;
;   listen queue len     - the size of the socket queue of pending connections;
;   idle processes       - the number of idle processes;
;   active processes     - the number of active processes;
;   total processes      - the number of idle + active processes;
;   max active processes - the maximum number of active processes since FPM
;                          has started;
;   max children reached - number of times, the process limit has been reached,
;                          when pm tries to start more children (works only for
;                          pm 'dynamic' and 'ondemand');
; Value are updated in real time.
; Example output:
;   pool:                 www
;   process manager:      static
;   start time:           01/Jul/2011:17:53:49 +0200
;   start since:          62636
;   accepted conn:        190460
;   listen queue:         0
;   max listen queue:     1
;   listen queue len:     42
;   idle processes:       4
;   active processes:     11
;   total processes:      15
;   max active processes: 12
;   max children reached: 0
;
; By default the status page output is formatted as text/plain. Passing either
; 'html', 'xml' or 'json' in the query string will return the corresponding
; output syntax. Example:
;   http://www.foo.bar/status
;   http://www.foo.bar/status?json
;   http://www.foo.bar/status?html
;   http://www.foo.bar/status?xml
;
; By default the status page output is formatted as text/plain. Passing either
; 'html', 'xml' or 'json' in the query string will return the corresponding
; output syntax. Example:
;   http://www.foo.bar/status
;   http://www.foo.bar/status?json
;   http://www.foo.bar/status?html
;   http://www.foo.bar/status?xml
;
; By default the status page only outputs short status. Passing 'full' in the
; query string will also return status for each pool process.
; Example:
;   http://www.foo.bar/status?full
;   http://www.foo.bar/status?json&full
;   http://www.foo.bar/status?html&full
;   http://www.foo.bar/status?xml&full
; The Full status returns for each process:
;   pid                  - the PID of the process;
;   state                - the state of the process (Idle, Running, ...);
;   start time           - the date and time the process has started;
;   start since          - the number of seconds since the process has started;
;   requests             - the number of requests the process has served;
;   request duration     - the duration in µs of the requests;
;   request method       - the request method (GET, POST, ...);
;   request URI          - the request URI with the query string;
;   content length       - the content length of the request (only with POST);
;   user                 - the user (PHP_AUTH_USER) (or '-' if not set);
;   script               - the main script called (or '-' if not set);
;   last request cpu     - the %cpu the last request consumed
;                          it's always 0 if the process is not in Idle state
;                          because CPU calculation is done when the request
;                          processing has terminated;
;   last request memory  - the max amount of memory the last request consumed
;                          it's always 0 if the process is not in Idle state
;                          because memory calculation is done when the request
;                          processing has terminated;
; If the process is in Idle state, then informations are related to the
; last request the process has served. Otherwise informations are related to
; the current request being served.
; Example output:
;   ************************
;   pid:                  31330
;   state:                Running
;   start time:           01/Jul/2011:17:53:49 +0200
;   start since:          63087
;   requests:             12808
;   request duration:     1250261
;   request method:       GET
;   request URI:          /test_mem.php?N=10000
;   content length:       0
;   user:                 -
;   script:               /home/fat/web/docs/php/test_mem.php
;   last request cpu:     0.00
;   last request memory:  0
;
; Note: There is a real-time FPM status monitoring sample web page available
;       It's available in: /usr/local/Cellar/php@7.1/7.1.16/share/php/fpm/status.html
;
; Note: The value must start with a leading slash (/). The value can be
;       anything, but it may not be a good idea to use the .php extension or it
;       may conflict with a real PHP file.
; Default Value: not set
; pm状态监测应该开启来,上报到zabbix数据统计中心可以监测php-fpm运行情况,一旦有异常发生应该通过邮件和代码错误报警
pm.status_path = /pm_status

; The ping URI to call the monitoring page of FPM. If this value is not set, no
; URI will be recognized as a ping page. This could be used to test from outside
; that FPM is alive and responding, or to
; - create a graph of FPM availability (rrd or such);
; - remove a server from a group if it is not responding (load balancing);
; - trigger alerts for the operating team (24/7).
; Note: The value must start with a leading slash (/). The value can be
;       anything, but it may not be a good idea to use the .php extension or it
;       may conflict with a real PHP file.
; Default Value: not set
ping.path = /pm_ping

; This directive may be used to customize the response of a ping request. The
; response is formatted as text/plain with a 200 response code.
; Default Value: pong
ping.response = pong




