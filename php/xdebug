https://xdebug.org/docs/
https://xdebug.org/docs/all_functions
https://github.com/xdebug/xdebug

安装
直接从git上下载 然后编译:
git clone https://github.com/xdebug/xdebug.git
cd /usr/local/Cellar/php71/7.1.2_13/bin
./phpize
./configure -h //查看帮助
./configure --enable-xdebug --with-php-config=/usr/local/Cellar/php71/7.1.2_13/bin/php-config
make clean
make && make install

添加php扩展
vim /usr/local/etc/php/7.1/conf.d/11-xdebug.ini:
zend_extension="xdebug.so"

需要注意的地方：
1.在执行跟踪开始之前，当前执行程序必须对配置xdebug.trace_output_dir指定的输出具有写入的权限
//xdebug.trace_options=0 覆盖写,1是追加写,线上的话一定要设置为覆盖写!!

xdebug_start_trace();
.....
var_dump(xdebug_stop_trace());

2.在本地开发的时候关闭自动跟踪，把gc回收统计打开，本地php ini配置文件
vim /usr/local/etc/php/7.1/conf.d/11-xdebug.ini

3.在需要var_dump();die;的地方可以用下面的代替
xdebug_print_function_stack( 'Your own message' );

4.获取方法的执行顺序
var_dump(xdebug_get_function_stack());

5.获取响应头
xdebug_get_headers()

6.对指定的函数进行监视
xdebug_start_function_monitor( [ 'strrev', 'array_push' ] );

/* Run some code: */
echo strrev("yes!"), "\n";
echo strrev("yes!"), "\n";

var_dump(xdebug_get_monitored_functions());
xdebug_stop_function_monitor();

7.如何对某一段代码进行追踪，将auto_trace设置为0，然后在需要的代码之间调用开始追踪和结束追踪函数
xdebug.auto_trace=0

xdebug_start_trace()
...
xdebug_stop_trace();

开始追踪和结束追踪都返回追踪日志存储的文件名(路径)



