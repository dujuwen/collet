http://phpsecurity.readthedocs.io/en/latest/index.html
http://php.net/manual/zh/security.php

1.所有的用户输入必须进过安全检查
比如用户输入的是文件名那么文件名中..符号是肯定不能存在的，此时可以用basename来获取名称并用ctype系列函数来检测文件名是否只有字母数字和下划线,
而没有其他符号

2.数据库安全
1)数据库设计安全
在给予数据库用户权限的时候要考虑用户的使用场景，比如普通用户只能拥有普通增删改查的权利而不能拥有删除表、清空整个表的权利
一定不能将超级用户或者具有新增用户权限的用户作为普通数据库访问用户使用
2)数据库查询安全，防止sql注入
永远不要使用超级用户或所有者帐号去连接数据库。要用权限被严格限制的帐号。
检查输入的数据是否具有所期望的数据格式。PHP 有很多可以用于检查输入的函数，从简单的变量函数和字符类型函数（比如 is_numeric()，ctype_digit()）
到复杂的 Perl 兼容正则表达式函数都可以完成这个工作。
如果程序等待输入一个数字，可以考虑使用 is_numeric() 来检查，或者直接使用 settype() 来转换它的类型，也可以用 sprintf() 把它格式化为数字
使用数据库特定的敏感字符转义函数（比如 mysql_escape_string() 和 sql_escape_string()）把用户提交上来的非数字数据进行转义。
如果数据库没有专门的敏感字符转义功能的话 addslashes() 和 str_replace() 可以代替完成这个工作。
要不择手段避免显示出任何有关数据库的信心，尤其是数据库结构。参见错误报告和错误处理函数。
也可以选择使用数据库的存储过程和预定义指针等特性来抽象数库访问，使用户不能直接访问数据表和视图。但这个办法又有别的影响。

3.每个数据除了测试预期正确的输入外还要写单元测试测试非预期的输入

4.错误报告
http://php.net/manual/zh/security.errors.php

第一个是彻底地检查所有函数，并尝试弥补大多数错误。
第二个是对在线系统彻底关闭错误报告。
第三个是使用 PHP 自定义的错误处理函数创建自己的错误处理机制。根据不同的安全策略，三种方法可能都适用。

一个能提前阻止这个问题发生的方法就是利用 error_reporting() 来帮助使代码更安全并发现变量使用的危险之处。
在发布程序之前，先打开 E_ALL 测试代码，可以帮你很快找到变量使用不当的地方。一旦准备正式发布，就应该把 error_reporting() 的参数设为 0 来
彻底关闭错误报告或者把 php.ini 中的 display_errors 设为 off 来关闭所有的错误显示以将代码隔绝于探测。
当然，如果要迟一些再这样做，就不要忘记打开 ini 文件内的 log_errors 选项，并通过 error_log 指定用于记录错误信息的文件。

5.

