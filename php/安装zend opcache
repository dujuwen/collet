可以选择在第一次安装的时候通过--enable-opcache一起编译安装

也可以选择手动安装：
$ cd /Users/dujunwen/Downloads/php-7.1.2/ext/opcache
$ /usr/local/Cellar/php71/7.1.2_13/bin/phpize //检测环境生成配置文件
$ ./configure --with-php-config=/usr/local/Cellar/php71/7.1.2_13/bin/php-config
$ sudo make && make install

安装成功后会显示类似:
sh-3.2# make install
Installing shared extensions:     /usr/local/Cellar/php71/7.1.2_13/lib/php/extensions/debug-non-zts-20160303/

接着在php ini配置中新建一个配置文件目录下新建文件opcache.ini来存放opcache相关配置，加载扩展:

; Enable Zend OPcache extension module
zend_extension=opcache.so

检测opcache模块是否安装成功:
php -m 或者 php -i | grep -i opcache

图像用户界面查看opcache缓存情况可选的有:
https://github.com/amnuts/opcache-gui (推荐，更简单些)

https://github.com/PeeHaa/OpCacheGUI

重启php-fpm是必要的吗?
部署代码后重启php-fpm的目的除了解决某些代码内存泄漏问题,还可以重置opcache缓存的文件(前提是开启了opcache缓存)
如果不存在内存泄漏和opcache缓存的话可以长时间不用重启!

下面这选项开启的话需要系统支持
opcache.huge_code_pages=1

注意：官方给了一个 Note，如果 opcache 要与 xdebug 同时加载，那么 opcache 需要在 xdebug 之前进行加载

在本地开启opcache之前请求使用laravel框架大概rps大概是22，开启opcache之后飙升到66，速度明显有了成倍的提升!!!
ab -c2 -n100 127.0.0.1:8000/v1/usertest
