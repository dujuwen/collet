考虑到php升级可能带来的变化在开发过程中尽量不要使用别名函数!!

1.PHP 支持四种标量值（标量值不能拆分为更小的单元，例如和数组不同）类型：整型值（integer），浮点数值（float），字符串值（string）和布尔值（boolean）。
PHP 也支持两种复合类型：数组和对象。这两种类型具可以赋值给变量或者从函数返回。
标量:bi fs

2.有效的类型申明
http://php.net/manual/zh/functions.arguments.php#functions.variable-arg-list

类或者接口名称、self、array、callable、bool、float、int、string

3.函数返回值类型申明
http://php.net/manual/zh/functions.returning-values.php

function sum($a, $b): int {
    return $a + $b;
}

4.error
http://php.net/manual/zh/language.errors.php7.php

Throwable
    Error
    Exception
    
Error 类并非继承自 Exception 类，所以不能用 catch (Exception $e) { ... } 来捕获 Error。你可以用 catch (Error $e) { ... }，
或者通过注册异常处理函数（ set_exception_handler()）来捕获 Error。
由于Error和Exception都继承自Throwable所以可以使用catch(Throwable $t)来同时捕获异常或者错误

5.http基本认证除了可以在nginx上直接认证外还可以在php中认证
http://php.net/manual/zh/features.http-auth.php

6.php可以像其他脚本一样运行
http://php.net/manual/zh/features.commandline.php

#!/usr/bin/php
<?php
    var_dump($argv);
?>

7.如果只是简单的调试php代码不想更改服务器配置的话可以使用内置服务器
http://php.net/manual/zh/features.commandline.webserver.php

$ cd ~/public_html
$ php -S localhost:8000

8.如何查看php的编译信息
php -i | grep configure
php-fpm -i | grep configure
php-config --configure-options

nginx是nginx -V

9.php共享存储位置,安装目录lib下
/Users/dujunwen/Desktop/test/after_build/php7.1.17/lib/php/extensions/no-debug-non-zts-20160303

查找共享库路径:
php-config --extension-dir

10.官网的php安装方法
http://php.net/manual/zh/install.unix.nginx.php

准备好php源文件,考虑需要的支持或者扩展
cd ../php-x.x.x
./configure --enable-fpm --with-mysql ...省略了
make
sudo make install

如何创建配置文件呢？
是work环境就将源码中的php.ini-development拷贝到安装目录下的lib目录，然后将名称改为php.ini
是线上环境就将源码中的php.ini-production拷贝到安装目录下的lib目录，然后将名称改为php.ini

cp php.ini-development /usr/local/php/php.ini
cp /usr/local/etc/php-fpm.conf.default /usr/local/etc/php-fpm.conf
cp sapi/fpm/php-fpm /usr/local/bin

修改配置php.ini php-fpm.conf
启动php-fpm

11.php-fpm如何知道是从哪里读取php.ini配置信息的呢？
php-fpm是跟随php(通过 --enable-fpm)安装的，在编译选项中存在--with-config-file-path的话从指定目录下查找php.ini
其他方式可以通过php --ini 或者 phpinfo() 来获取

12.密码散列
http://php.net/manual/zh/book.password.php

$password = 'djwtes';
$hash = password_hash($password, PASSWORD_DEFAULT);
var_dump($hash, password_verify($password, $hash), password_get_info($hash));

13.html和php
http://php.net/manual/zh/faq.html.php

显示数据的时候必须使用htmlspecialchars — 将特殊字符转换为 HTML 实体

14.phpize命令的作用
http://php.net/manual/zh/install.pecl.phpize.php

phpize 命令是用来准备 PHP 扩展库的编译环境的

15.PEAR, PECL和Perl的区别
PEAR是PHP扩展与应用库（the PHP Extension and Application Repository）的缩写。它是一个PHP扩展及应用的一个代码仓库，简单地说，
PEAR就是PHP的CPAN。

PECL （PHP Extension Community Library），PHP的扩展库，它提供了一系列已知的扩展库，由C++等其他语言编写而成，以.so形式出现，.so 为共享库,
是shared object,用于动态连接的,和dll差不多，为比PEAR更快，但是与PEAR不同的是，PECL需要在服务器上配置并被注册到主机中。

Perl （Practical Extraction and Report Language)Perl借取了C、sed、awk、shell scripting以及很多其他程序语言的特性。
其中最重要的特性是它内部集成了正则表达式的功能，以及巨大的第三方代码库CPAN。简而言之，Perl象C一样强大，象awk、sed等脚本描述语言一样方便

最直接的表述：Pear是PHP的上层扩展，Pecl是PHP的底层扩展。

16.php-config
http://php.net/manual/zh/install.pecl.php-config.php

php-config 是一个简单的命令行脚本用于获取所安装的 PHP 配置的信息。

在编译扩展时，如果安装有多个 PHP 版本，可以在配置时用 --with-php-config 选项来指定使用哪一个版本编译，该选项指定了相对应的 php-config 
脚本的路径。

php-config 脚本在命令行所能使用的选项可以通过 -h 选项来显示：
Usage: /usr/local/bin/php-config [OPTION]
Options:
  --prefix            [...]
  --includes          [...]
  --ldflags           [...]
  --libs              [...]
  --extension-dir     [...]
  --include-dir       [...]
  --php-binary        [...]
  --php-sapis         [...]
  --configure-options [...]
  --version           [...]
  --vernum            [...]
  
获取php的configure信息可以用:
$ php-config --configure-options

获取php扩展安装路径:
$ php-config --extension-dir
/usr/lib/php/extensions/no-debug-non-zts-20160303

17.将 PECL 扩展库静态编译入 PHP 
http://php.net/manual/zh/install.pecl.static.php

有些第三方库没有办法静态编译到php中比如xdebug
这样的库可以动态编译之后将对应的so文件移动到php-config --extension-dir对应的目录下，然后在php.ini配置文件中通过zend_extension=xxx.so启用
该库，并修改相应的配置

18.异常处理
http://php.net/manual/zh/language.exceptions.php

try {
    echo inverse(5) . "\n";
} catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
} finally {
    echo "First finally.\n";
}

在有错误或异常的时候定义了set_error_handler或set_exception_handler函数的时候会捕获错误或异常信息
设置用户自定义的错误/异常处理函数

19.涉及错误的运行时配置

错误处理:
http://php.net/manual/zh/book.errorfunc.php

将致命的错误发送到邮箱，其他的记录到日志、ELK
日志一定要打印出调用栈

http://php.net/manual/zh/errorfunc.configuration.php
error_reporting = E_ALL ; 开发环境为全部
display_errors = On ; 开发环境为On，线上环境为Off
display_startup_errors = On ; 开发环境为On，线上环境为Off
log_errors = On ;
track_errors = On ; 如果开启，最后的一个错误将永远存在于变量 $php_errormsg 中

20.debug_backtrace打印调用回溯，debug_print_backtrace打印include/require回溯
http://php.net/manual/zh/function.debug-backtrace.php

21.php中官方所有的函数和使用示例
http://php.net/manual/zh/indexes.functions.php
http://php.net/manual/zh/indexes.examples.php

22.全局命名空间
http://php.net/manual/zh/userlandnaming.globalnamespace.php

以下代码结构会进入全局命名空间：
functions（函数）
classes（类）
interfaces（接口）
constants（常量，并非类常量）
在函数／方法之外定义的变量

规则:
函数名在两个词中间使用下划线，类名则同时使用 camelCase 和 PascalCase 规则。
PHP 在任何扩展库的全局符号前附加上扩展库的名称
Iterators 和 Exceptions 则只是简单加上 "Iterator" 和 "Exception" 后缀。例如：
ArrayIterator
LogicException

提示(虽然有命名空间可以解决，但是有独特的全局命名空间肯定是更好的):
要写出能经受住时间考验的代码，建议给任何进入全局命名空间的符号都加上一个不常见的 3-4 字母的前缀（或后缀），中间用下划线分开。

23.解析器代号列表
http://php.net/manual/zh/tokens.php
token_get_all — 将提供的源码按 PHP 标记进行分割
token_name — 获取提供的 PHP 解析器代号的符号名称

24.get_browser(),通过查找 browscap.ini 文件中的浏览器信息，尝试检测用户的浏览器所具有的功能
http://php.net/manual/zh/function.get-browser.php
可以用来统计用户的浏览器访问信息进行后面的分析，考虑到性能问题可以使用第三方库:https://github.com/sinergi/php-browser-detector

25.version_compare — 对比两个「PHP 规范化」的版本数字字符串
http://php.net/manual/zh/function.version-compare.php

version_compare('7.1.2', '5.5.6'); => 1
version_compare('7.1.2', '5.5.6', '>='); => true
在需要进行规范化版本对比的时候可以使用version_compare

26.可以使用openssl，利用公钥进行加密数据，利用私钥解密数据。可以把配置存放到数据库中，有改变的时候重新根据加密后的数据和配置生成新的配置文件
https://blog.csdn.net/u012302539/article/details/60779715

// 生成私钥  
# openssl genrsa -out rsa_private_key.pem 1024  
// 生成公钥  
# openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem  

27.parse_ini_file() — 解析一个配置文件，配置文件的语法和php.ini是一样的
http://php.net/manual/zh/function.parse-ini-file.php

28.sys_getloadavg(),返回三个系统负载（系统运行队列中的进程数）的样本数据，分别是1分钟、5分钟和15分钟之前
http://php.net/manual/zh/function.sys-getloadavg.php

29.PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括perl兼容的正规表达式库
http://php.net/manual/zh/book.pcre.php

这些函数中使用的模式语法非常类似perl。表达式必须用分隔符闭合，比如一个正斜杠(/)。 分隔符可以使任意非字母数字，除反斜杠(\)和空字节之外的非空白
ascii 字符。 如果分隔符 在表达式中使用，需要使用反斜线进行转义。自php 4.0.4开始，可以使用 perl 样式的()、 {}、 [] 以及 <> 作为分隔符。

常见的合法分隔符:
/foo bar/
#^[^0-9]$#
+php+
%[a-zA-Z0-9_-]%

30.元字符
http://php.net/manual/zh/regexp.reference.meta.php

? 作为量词，表示 0 次或 1 次匹配。位于量词后面用于改变量词的贪婪特性
* 量词，0 次或多次匹配
+ 量词，1 次或多次匹配

模式中方括号内的部分称为“字符类”。 在一个字符类中仅有以下可用元字符：
\ 转义字符
^ 仅在作为第一个字符(方括号内)时，表明字符类取反
- 标记字符范围

反斜线在单引号字符串和双引号字符串 中都有特殊含义，因此要匹配一个反斜线， 模式中必须写为 ”\\\\”。

\d 任意十进制数字
\D 任意非十进制数字
\s 任意空白字符
\S 任意非空白字符
\w 任意单词字符
\W 任意非单词字符


31.字符类(方括号)
http://php.net/manual/zh/regexp.reference.character-classes.php

Perl 支持 POSIX 字符类符号。这种字符类使用[:和:]闭合。 PCRE 同样支持这些字符类， 比如，[01[:alpha:]%]匹配 ”0”、“1”、任意字母或”%”。 
支持的字符类如下：
alnum	字母和数字
alpha	字母
ascii	0 - 127的ascii字符
blank	空格和水平制表符
cntrl	控制字符
digit	十进制数(same as \d)
graph	打印字符, 不包括空格
lower	小写字母
print	打印字符,包含空格
punct	打印字符, 不包括字母和数字
space	空白字符 (比\s多垂直制表符)
upper	大写字母
word	单词字符(same as \w)
xdigit	十六进制数字

32.正则处理手机号
$phoneNum = '18782966000';
var_dump(preg_replace('/^(\d{3})(\d{4})(\d{4,})/', '$1****$3', $phoneNum));
//187****6000

33.子组
http://php.net/manual/zh/regexp.reference.subpatterns.php

经常我们会有一种需求需要使用子组进行分组， 但又不需要(单独的)捕获它们。 在子组定义的左括号后面紧跟字符串 ”?:” 会使得该子组不被单独捕获，
并且不会对其后子组序号的计算产生影响。比如, 如果字符串 "the white queen" 匹配模式 the ((?:red|white) (king|queen))，
匹配到的子串是 "white queen" 和 "queen"， 他们的下标分别是 1 和 2。捕获子组的最大序号为 65535。然而，有可能我们并不能编译这么长的
正则表达式，这取决于 libpcre 的配置。

为了方便简写，如果需要在非捕获子组开始位置设置选项， 选项字母可以位于 ? 和 : 之间，比如：
(?i:saturday|sunday)
(?:(?i)saturday|sunday)

34.
