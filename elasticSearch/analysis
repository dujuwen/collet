analysis，es分析
https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html

1.分析过程是通过分析器来分析的，可以在创建索引时指定分析器或者在搜索时指定分析器，如果在创建时没有指定分词器那么使用的是默认分词器

索引时指定分词器：
curl -XPUT 'localhost:9200/user?pretty' -H 'Content-Type: application/json' -d'
{
  "mappings": {
    "_doc": {
      "properties": {
        "title": {
          "type":     "text",
          "analyzer": "standard"
        }
      }
    }
  }
}
'
在搜索时指定的分词器必须和索引定义是使用的分词器一样，ES寻找分词器的顺序(优先级)：
1) An analyzer specified in the query itself. 在query中明确指定的
2) The search_analyzer mapping parameter. search_analyzer参数映射指定的分词器
3) The analyzer mapping parameter. analyzer映射参数指定的分词器
4) An analyzer in the index settings called default_search. 索引设置中指定的default_search对应的值
5) An analyzer in the index settings called default. 索引设置中default对应的值
6) The standard analyzer. 系统自带的标准分词器

2.anatomy of tokenizer，解剖分词器
https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html

无论是自带的分词器还是自定义的分词器，这些分词器都可能由字符过滤(任意个，按顺序应用)、分词器(只有一个)和token过滤(任意个，按顺序应用)三部分组成

3.testing analyzers，测试分词器
https://www.elastic.co/guide/en/elasticsearch/reference/current/_testing_analyzers.html

使用分词器测试api来测试分词器效果是非常有必要的
https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html

例如：
➜  ~ curl -XPOST "http://localhost:9200/_analyze?pretty" -H 'Content-Type: application/json' -d'
{
  "tokenizer": "standard",
  "filter":  [ "lowercase", "asciifolding" ],
  "text":      "Is this déja ME 啊哈?"
}'

其中一部分数据是：
{
      "token" : "哈",
      "start_offset" : 17,
      "end_offset" : 18,
      "type" : "<IDEOGRAPHIC>",
      "position" : 5
}
分词器在分词的过程中不仅产生了分词，还生成了position(used for phrase queries or word proximity queries)和start_offset end_offset 
(used for highlighting search snippets)。postion用于单词和相近词搜索，offset用户高亮搜索

自定义分词器需先在索引中定义然后在映射中引用，测试自定义分词器的时候可以通过分词器名称或者通过映射的字段来引用

也可以在测试的时候使用临时自定义分词器来测试
https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html

测试一个自定义临时分词器:
➜  ~ curl -XGET 'localhost:9200/_analyze?pretty' -H 'Content-Type: application/json' -d'
{
  "filter" : ["lowercase"],
  "text" : "BaR"
}
'
4.





