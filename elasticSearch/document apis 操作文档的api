https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html

Single document APIs:
Index API
Get API
Delete API
Update API

Multi-document APIs:
Multi Get API
Bulk API
Delete By Query API
Update By Query API
Reindex API

All CRUD APIs are single-index APIs. The index parameter accepts a single index name, or an alias which points to a single index.

https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-replication.html
Reading and Writing documents
基本写文档模型，主分片处理操作的步骤：
1.检查主分片接收到的操作，如果操作无效则拒绝执行
2.主分片上执行操作，执行成功进行下一步
3.将操作内部同步转发到各个副本
4.所有副本都执行成功并且向主分片反馈，主分片再向请求的客户端告知对应的操作已经成功处理

写文档失败处理：
由主分片所在节点告知master，然后等待最多1分钟(默认)matser会从其他的副本中选择一个新的主分片，然后再新的主分片上执行操作
...

基本读:
请求由节点到任意一个分片(即有可能是主分片或其他任何的副本)，执行查询操作，组合数据并返回(如果根据文档id查询则不存在组合数据)

es还有一些潜在的问题，可以查询GitHub上的issue或者
https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html

1.search lite
https://www.elastic.co/guide/en/elasticsearch/guide/current/search-lite.html
通过url后跟查询参数的方式查询es中的数据一般用于命令行或者调试情况，在实际应该中推荐使用json放到request body查询数据

2.在提交数据的时候如果指定了id那么PUT或POST提交都可以，如果没有指定id那么就只能POST提交了
curl -XPUT/POST 'localhost:9200/twitter/_doc/1?pretty' -H 'Content-Type: application/json' -d'xx'
curl -XPOST 'localhost:9200/twitter/_doc?pretty' -H 'Content-Type: application/json' -d'xx'

3.索引api
https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html
索引API里面比较重要的几个概念：自动索引创建、版本控制、操作类型、路由、数据搜索刷新、无操作更新、操作超时时间

4.curl只获取head头来判断es数据是否存在，返回200表示存在，404表示不存在
➜  ~ curl -I 'localhost:9200/twitter/tweet/11?pretty'
HTTP/1.1 200 OK
content-type: application/json; charset=UTF-8
content-length: 228

➜  ~ curl -I 'localhost:9200/twitter/tweet/111?pretty'
HTTP/1.1 404 Not Found
content-type: application/json; charset=UTF-8
content-length: 84

curl -I选项表示只获取head头信息，-H是设置head头信息

5.get api
https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html
比较常用的是：source filtering
➜  ~ curl -I 'localhost:9200/twitter/tweet/11/_source?pretty'

HTTP/1.1 200 OK
content-type: application/json; charset=UTF-8
content-length: 105

➜  ~ curl -I 'localhost:9200/twitter/tweet/112/_source?pretty'

HTTP/1.1 404 Not Found
content-type: application/json; charset=UTF-8
content-length: 1

/_source和?_source的区别在于：前者只获取source的值，后者过滤获取source值的同时还要获取type等信息

➜  ~ curl 'localhost:9200/twitter/tweet/11/_source?pretty'

{
  "user" : "kimchy",
  "post_date" : "2009-11-15T14:12:12",
  "message" : "trying out Elasticsearch"
}
➜  ~ curl 'localhost:9200/twitter/tweet/11/?pretty'

{
  "_index" : "twitter",
  "_type" : "tweet",
  "_id" : "11",
  "_version" : 1,
  "found" : true,
  "_source" : {
    "user" : "kimchy",
    "post_date" : "2009-11-15T14:12:12",
    "message" : "trying out Elasticsearch"
  }
}

终极武器：
➜  ~ curl 'localhost:9200/twitter/tweet/11/_source?pretty&_source=user'
{
  "user" : "kimchy"
}

其他影响get api 的功能有：
realtime
stored fileds
routing
preference
refresh
versioning control, 可以用版块控制来判断某个文档是否被更新或者删除了

6.





