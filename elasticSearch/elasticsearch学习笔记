github的api提示
https://api.github.com/

1.建立索引(index)的时候所有字母必须小写

2.从6.0.0开始mapping types被遗弃了并会在7.0版本中彻底移除,所以现在在一个索引下只保留一个类型的数据
https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html#_what_are_mapping_types
index/type 更恰当的比喻是只有一张表的数据库

3.shards 
分片可以被托管在集群中的任意节点上，分片是类似于数据库的分表，将一个大的index分割成更小的单元
分片可以在创建index之后设置想要的数量，具体实现细节由es实现，使用者不需要关心

分片的好处：
水平增加存储空间和提高性能与吞吐量

4.replicas 副本
副本的好处：提高可用性和性能

总的来说：一个index可以切割成多个shard，一个shard可以有0个或多个replica。一旦一个分片被复制了一次及其以上，就有主分片和复制分片。
Once replicated, each index will have primary shards (the original shards that were replicated from) 
and replica shards (the copies of the primary shards).

副本数跟分片数一样可以在创建索引的时候定义。在副本数和分片数被定义好(在索引被创建好)之后，可以动态的调整副本数，但是不能调整分片数
After the index is created, you may change the number of replicas dynamically anytime 
but you cannot change the number of shards after-the-fact.

By default, each index in Elasticsearch is allocated 5 primary shards and 1 replica which means that if you have 
at least two nodes in your cluster, your index will have 5 primary shards and another 5 replica shards (1 complete replica)
for a total of 10 shards per index.

Each Elasticsearch shard is a Lucene index. There is a maximum number of documents you can have in a single Lucene index. 
As of LUCENE-5843, the limit is 2,147,483,519 (= Integer.MAX_VALUE - 128) documents. 
You can monitor shard sizes using the _cat/shards API.

安装es:
https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html

5.es至少需要java 8，运行以下命令确认Java版本
➜  ~ java -version
java version "1.8.0_141"
Java(TM) SE Runtime Environment (build 1.8.0_141-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)

6.在启动的时候设置集群或节点名称
./elasticsearch -Ecluster.name=my_cluster_name -Enode.name=my_node_name

7.在启动es节点后可以使用REST API来与es沟通
REST API能做什么?
> Check your cluster, node, and index health, status, and statistics
> Administer your cluster, node, and index data and metadata
> Perform CRUD (Create, Read, Update, and Delete) and search operations against your indexes
> Execute advanced search operations such as paging, sorting, filtering, scripting, aggregations, and many others

RESTFUL
https://zhuanlan.zhihu.com/p/30396391?group_id=937244108725641216

PUT操作就是幂等操作
在编程中一个幂等操作的特点是其任意次执行所产生的影响均与一次执行的影响相同

http方法 操作资源 幂等 安全
GET      SELECT  是   是
POST     INSERT  否   否
PUT      UPDATE  是   否
DELETE   DELETE  是   否

8.Cluster Health
https://www.elastic.co/guide/en/elasticsearch/reference/current/_cluster_health.html
curl -XGET 'localhost:9200/_cat/health?v&pretty'

查看集群中的节点数:
curl -XGET 'localhost:9200/_cat/nodes?v&pretty'

9.List All Indices
curl -XGET 'localhost:9200/_cat/indices?v&pretty'

10.创建索引
https://www.elastic.co/guide/en/elasticsearch/reference/current/_create_an_index.html

在索引数据之前不是必须创建索引
curl -XPUT 'localhost:9200/customer?pretty&pretty'

查看所有索引
curl -XGET 'localhost:9200/_cat/indices?v&pretty'

11.删除索引
curl -XDELETE 'localhost:9200/customer?pretty'

12.es的更新文档实际上是先删除后增加

13.es批处理
https://www.elastic.co/guide/en/elasticsearch/reference/current/_batch_processing.html
curl -XPOST 'localhost:9200/customer/_doc/_bulk?pretty&pretty' -H 'Content-Type: application/json' -d'
{"index":{"_id":"1"}}
{"name": "John Doe" }
{"index":{"_id":"2"}}
{"name": "Jane Doe" }
' 

14.测试数据地址
https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json

15.批量导入数据
https://www.elastic.co/guide/en/elasticsearch/reference/current/_exploring_your_data.html
curl -H "Content-Type: application/json" -XPOST "localhost:9200/bank/account/_bulk?pretty&refresh" --data-binary "@accounts.json"
curl "localhost:9200/_cat/indices?v"

16.查询数据
uri和body式查询
https://www.elastic.co/guide/en/elasticsearch/reference/current/_the_search_api.html

https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-uri-request.html
curl -XGET 'localhost:9200/bank/_search?q=*&sort=account_number:asc&pretty&pretty'

https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-body.html
curl -XGET 'localhost:9200/bank/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "sort": [
    { "account_number": "asc" }
  ]
}
'

17.查询部分字段,默认情况下是查询所有字段
https://www.elastic.co/guide/en/elasticsearch/reference/current/_executing_searches.html
关键 "_source": ["account_number", "balance"]

curl -XGET 'localhost:9200/bank/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "_source": ["account_number", "balance"]
}
'

"query": { "match": { "address": "mill lane" } }
match是匹配包含mill或者lane的数据 (or)
"query": { "match_phrase": { "address": "mill lane" } }
match_phrase是包含"mill lane"的数据 (=)
match将查询条件分割成个体查询,match_phrase将查询条件当成整体

那么查询address 包含mill和lane怎么办(and)，用bool查询
GET /bank/_search
{
  "query": {
    "bool": {
      "must": [
        { "match": { "address": "mill" } },
        { "match": { "address": "lane" } }
      ]
    }
  }
}

bool must等价于sql中的and
bool must_not等价于sql中的!=
bool should等价于sql中的or
可以同时将must,must_not和should放到同一个bool查询中

18.


