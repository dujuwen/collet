es一些基准测试：
https://elasticsearch-benchmarks.elastic.co/index.html#tracks/http-logs/nightly/30d

github的api提示
https://api.github.com/

https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html

es概念理解:
https://www.zhihu.com/question/26446020?sort=created

集群、节点、分片和副本之间的关系：
一个索引的分片会存在不同的node上，一个分片的副本也会存在跟主分片不同的node上，这样除了可以提高性能还可以提高可用性
https://www.zhihu.com/question/26446020?sort=created
es集群的三种状态：
green(正常状态): 所有主分片和备份分片都准备就绪(分配成功)，如果有一个分片的备份(数据不会丢失)没有就绪那么系统就会变成yellow状态
yellow(告警状态): 所有主分片准备就绪，但至少有一个主分片的备份分片没有就绪，此时会降低系统性能和降低可用性
red(灾难状态): 至少有一个主分片没有就绪(直接原因就是找不到一个备份分片成为主分片)，此时执行查询会造成数据丢失

只有主分片可以处理来自客户端的请求，备份不可以处理。

1.建立索引(index)的时候所有字母必须小写

2.从6.0.0开始mapping types被遗弃了并会在7.0版本中彻底移除,所以现在在一个索引下只保留一个类型的数据
https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html#_what_are_mapping_types
index/type 更恰当的比喻是只有一张表的数据库

3.shards 
分片可以被托管在集群中的任意节点上，分片是类似于数据库的分表，将一个大的index分割成更小的单元
分片可以在创建index之后设置想要的数量，具体实现细节由es实现，使用者不需要关心

分片的好处：
水平增加存储空间和提高性能与吞吐量

4.replicas 副本
副本的好处：提高可用性和性能

总的来说：一个index可以切割成多个shard，一个shard可以有0个或多个replica。一旦一个分片被复制了一次及其以上，就有主分片和复制分片。
Once replicated, each index will have primary shards (the original shards that were replicated from) 
and replica shards (the copies of the primary shards).

副本数跟分片数一样可以在创建索引的时候定义。在副本数和分片数被定义好(在索引被创建好)之后，可以动态的调整副本数，但是不能调整分片数
After the index is created, you may change the number of replicas dynamically anytime 
but you cannot change the number of shards after-the-fact.

By default, each index in Elasticsearch is allocated 5 primary shards and 1 replica which means that if you have 
at least two nodes in your cluster, your index will have 5 primary shards and another 5 replica shards (1 complete replica)
for a total of 10 shards per index.

Each Elasticsearch shard is a Lucene index. There is a maximum number of documents you can have in a single Lucene index. 
As of LUCENE-5843, the limit is 2,147,483,519 (= Integer.MAX_VALUE - 128) documents. 
You can monitor shard sizes using the _cat/shards API.

安装es:
https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html
https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html
可以选用配置工具来安装，比如：Ansible

5.es至少需要java 8，运行以下命令确认Java版本
➜  ~ java -version
java version "1.8.0_141"
Java(TM) SE Runtime Environment (build 1.8.0_141-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)

6.在启动的时候设置集群或节点名称
./elasticsearch -Ecluster.name=my_cluster_name -Enode.name=my_node_name

7.在启动es节点后可以使用REST API来与es沟通
REST API能做什么?
> Check your cluster, node, and index health, status, and statistics
> Administer your cluster, node, and index data and metadata
> Perform CRUD (Create, Read, Update, and Delete) and search operations against your indexes
> Execute advanced search operations such as paging, sorting, filtering, scripting, aggregations, and many others

RESTFUL
https://zhuanlan.zhihu.com/p/30396391?group_id=937244108725641216

PUT操作就是幂等操作
在编程中一个幂等操作的特点是其任意次执行所产生的影响均与一次执行的影响相同

http方法 操作资源 幂等 安全
GET      SELECT  是   是
POST     INSERT  否   否
PUT      UPDATE  是   否
DELETE   DELETE  是   否

8.Cluster Health
https://www.elastic.co/guide/en/elasticsearch/reference/current/_cluster_health.html
curl -XGET 'localhost:9200/_cat/health?v&pretty'

查看集群中的节点数:
curl -XGET 'localhost:9200/_cat/nodes?v&pretty'

9.List All Indices
curl -XGET 'localhost:9200/_cat/indices?v&pretty'

10.创建索引
https://www.elastic.co/guide/en/elasticsearch/reference/current/_create_an_index.html

在索引数据之前不是必须创建索引
curl -XPUT 'localhost:9200/customer?pretty&pretty'

查看所有索引
curl -XGET 'localhost:9200/_cat/indices?v&pretty'

11.删除索引
curl -XDELETE 'localhost:9200/customer?pretty'

12.es的更新文档实际上是先删除后增加

13.es批处理
https://www.elastic.co/guide/en/elasticsearch/reference/current/_batch_processing.html
curl -XPOST 'localhost:9200/customer/_doc/_bulk?pretty&pretty' -H 'Content-Type: application/json' -d'
{"index":{"_id":"1"}}
{"name": "John Doe" }
{"index":{"_id":"2"}}
{"name": "Jane Doe" }
' 

14.测试数据地址
https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json

15.批量导入数据
https://www.elastic.co/guide/en/elasticsearch/reference/current/_exploring_your_data.html
curl -H "Content-Type: application/json" -XPOST "localhost:9200/bank/account/_bulk?pretty&refresh" --data-binary "@accounts.json"
curl "localhost:9200/_cat/indices?v"

16.查询数据
uri和body式查询
https://www.elastic.co/guide/en/elasticsearch/reference/current/_the_search_api.html

https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-uri-request.html
curl -XGET 'localhost:9200/bank/_search?q=*&sort=account_number:asc&pretty&pretty'

https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-body.html
curl -XGET 'localhost:9200/bank/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "sort": [
    { "account_number": "asc" }
  ]
}
'

17.查询部分字段,默认情况下是查询所有字段
https://www.elastic.co/guide/en/elasticsearch/reference/current/_executing_searches.html
关键 "_source": ["account_number", "balance"]

curl -XGET 'localhost:9200/bank/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "_source": ["account_number", "balance"]
}
'

"query": { "match": { "address": "mill lane" } }
match是匹配包含mill或者lane的数据 (or)
"query": { "match_phrase": { "address": "mill lane" } }
match_phrase是包含"mill lane"的数据 (=)
match将查询条件分割成个体查询,match_phrase将查询条件当成整体

那么查询address 包含mill和lane怎么办(and)，用bool查询
GET /bank/_search
{
  "query": {
    "bool": {
      "must": [
        { "match": { "address": "mill" } },
        { "match": { "address": "lane" } }
      ]
    }
  }
}

bool must等价于sql中的and
bool must_not等价于sql中的!=
bool should等价于sql中的or
可以同时将must,must_not和should放到同一个bool查询中

18.聚合查询
https://www.elastic.co/guide/en/elasticsearch/reference/current/_executing_aggregations.html

curl -XGET 'localhost:9200/bank/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "size": 0,
  "aggs": {
    "group_by_state": {
      "terms": {
        "field": "state.keyword"
      }
    }
  }
}
'
等价于：
SELECT state, COUNT(*) FROM bank GROUP BY state ORDER BY COUNT(*) DESC

19.es作为守护进程启动
https://www.elastic.co/guide/en/elasticsearch/reference/current/zip-targz.html
[sudo] ./bin/elasticsearch -d -p pid
如何停止呢？
kill `cat pid`

20.启动时配置es
./bin/elasticsearch -d -Ecluster.name=my_cluster -Enode.name=node_1

21.es约定
https://www.elastic.co/guide/en/elasticsearch/reference/current/api-conventions.html

https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-index.html
多索引url查询参数：
1) ignore_unavailable: 是否忽略单个 index 是否可用 (不存在或关闭), true 表示忽略, false 表示不忽略, 默认为 false
例如：GET /test1/user,account/_search?ignore_unavailable=false
2) allow_no_indices: 是否忽略通配符匹配不到 index(不存在或关闭) 的情况, true 表示允许, false 表示不允许，默认为 true
3) expand_wildcards: 设置是否扩展通配符到 closed 的 index 中，open 表示只在匹配并为 open 的 index 中查询，
closed 表示只匹配closed的索引，其他值还有all，none相当于禁用通配符展开

ignore_unavailable，allow_no_indices，expand_wildcards这些根据情况使用。单索引api不支持多索引

22.日期数学表达式索引
https://www.elastic.co/guide/en/elasticsearch/reference/current/date-math-index-names.html

在 Elasticsearch 中日期数学表达式是很常用的，在查询中经常会通过它来作为检索条件，比如 range 或者 daterange。表达式通常会有下面几种操作：

+1h ，表示加上一个一个小时
-1d，表示减去一天
/d，表示向一天取整
支持的单位也很多，比如

y，代表一年
M，代表一个月
w，代表一周
d，代表一天
h，代表一个小时
m，代表一分钟
s，代表一秒钟
ms，代表毫秒
举个例子：

now+1h，表示当前时间加上一个小时，即一个小时后
now+1h+1m，表示当前时间加上一个小时零一分钟，即一个小时一分钟后
now+1h/d，表示当前时间加上一个小时，并向一天取整。
2015-01-01\|\|+1M/d，2015-01-01 加上一个月，并向一天取整

A date math index name takes the following form:
<static_name{date_math_expr{date_format|time_zone}}>

Expression	       Resolves to
<logstash-{now/d}> logstash-2024.03.22

<logstash-{now/M}> logstash-2024.03.01

<logstash-{now/M{YYYY.MM}}> logstash-2024.03

<logstash-{now/M-1M{YYYY.MM}}> logstash-2024.02

<logstash-{now/d{YYYY.MM.dd|+12:00}}> logstash-2024.03.23

例如：
GET /%3Clogstash-%7Bnow%2Fd%7D%3E/_search 等价于GET /<logstash-{now/d}>/_search url里面的符合必须被url编码

23.通用选项
https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html

1) format=yaml: 表示返回数据的格式, 可选值为 yaml 和 json 两种,默认是json 例如:
输入: GET /test1/user/_search?format=json
2) pretty=true或pretty: 表示在已 json 格式返回数据时是否以可视化的格式返回, false 或未在设置表示不格式化, 否则格式化
3) human: 表示是否对返回结果进行视觉友好处理，比如 3600(s) 显示 1h
4) 查询结果过滤(返回内容过滤)
主要使用 filter_path 参数进行设置
比如我只关心查询结果中的took和hits.total
➜  ~ curl -XGET 'localhost:9200/bank/account/_search?format=json&pretty&human&filter_path=took,hits.total'
{
  "took" : 3,
  "hits" : {
    "total" : 1499
  }
}

也可以使用统配符进行设置
输入: GET /_nodes/stats?filter_path=nodes.*.*ost*,nodes.*.os.*u

若层级较多时可使用 ** 进行简化
输入: GET /_nodes/stats?filter_path=nodes.**.*sys*

若只需要_source 中的某些值，则可以将 filter_path 和_source 参数共同使用
输入: GET /test1/account/_search?filter_path=hits.hits._source&_source=firstname,lastname,gender&size=2

5)扁平化 flat_settings 用于设置在查询 setting 时, setting 中的 key 格式, 默认为 false:
输入: GET /test1/_settings?flat_settings=true
"index.creation_date": "1442230557598",

输入: GET /test1/_settings?flat_settings=false
"index": {
            "creation_date": "1442230557598",
          }
          

24.请求参数

25.启用错误跟踪
set error_trace=true:
POST /twitter/_search?size=surprise_me&error_trace=true

26.基于url的访问控制
https://www.elastic.co/guide/en/elasticsearch/reference/current/url-access-control.html

elasticsearch.yml file:
rest.action.multi.allow_explicit_index: false

这个值默认是true，当设置成false的时候es会拒绝请求body中显示指定index的请求
