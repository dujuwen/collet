https://dev.mysql.com/doc/refman/8.0/en/statement-optimization.html

1.查询主要考虑方向
https://dev.mysql.com/doc/refman/8.0/en/select-optimization.html

1) 使select..where更快的第一反应是添加索引
2) 调整(避免)耗时函数的使用
3) 最小化的全表扫码特别是对于大表
4) 对于不同的存储引擎调参、调索引、调配置
5) 周期性的优化表 ANALYZE TABLE 
6) 使用只读来优化单查询事务
7) 不要写对于数据库来说难优化的语句
8) 使用explain分析sql
9) 合适的缓存空间
10) 在利用内存更快的同时应该考虑能否使用更少的内存空间达到同样的效果
11) 使用适当的锁

2.EXPLAIN key_len
https://dev.mysql.com/doc/refman/8.0/en/range-optimization.html
The key_len column in the EXPLAIN output indicates the maximum length of the key prefix used.
In some cases, key_len may indicate that a key part was used, but that might be not what you would expect.

3.范围优化
https://dev.mysql.com/doc/refman/8.0/en/range-optimization.html

Only IN() predicates are used, not NOT IN().
只有in()范围才会优化，not in()不会

4.https://dev.mysql.com/doc/refman/8.0/en/subquery-optimization-with-exists.html
outer_expr IN (SELECT inner_expr FROM ... WHERE subquery_where)
EXISTS (SELECT 1 FROM ... WHERE subquery_where AND outer_expr=inner_expr)

5.EXPLAIN Output Columns
https://dev.mysql.com/doc/refman/8.0/en/explain-output.html





https://mp.weixin.qq.com/s/dGcgts4NNTmVQNRT-j2MZw

一、一些常见的SQL实践
（1）负向条件查询不能使用索引
select * from order where status!=0 and stauts!=1
not in/not exists都不是好习惯

可以优化为in查询：
select * from order where status in(2,3)
 
（2）前导模糊查询不能使用索引
select * from order where desc like '%XX'
而非前导模糊查询则可以：
select * from order where desc like 'XX%'
 
（3）数据区分度不大的字段不宜使用索引
select * from user where sex=1
原因：性别只有男，女，每次过滤掉的数据很少，不宜使用索引。

经验上，能过滤80%数据时就可以使用索引。对于订单状态，如果状态值很少，不宜使用索引，如果状态值很多，能够过滤大量数据，则应该建立索引。
 
（4）在属性上进行计算不能命中索引
select * from order where YEAR(date) < = '2017'
即使date上建立了索引，也会全表扫描，可优化为值计算：
select * from order where date < = CURDATE()
或者：
select * from order where date < = '2017-01-01'
 
二、并非周知的SQL实践
（5）如果业务大部分是单条查询，使用Hash索引性能更好，例如用户中心
select * from user where uid=?
select * from user where login_name=?
原因：
B-Tree索引的时间复杂度是O(log(n))
Hash索引的时间复杂度是O(1)
 
（6）允许为null的列，查询有潜在大坑
单列索引不存null值，复合索引不存全为null的值，如果列允许为null，可能会得到“不符合预期”的结果集
select * from user where name != 'shenjian'
如果name允许为null，索引不存储null值，结果集中不会包含这些记录。

所以，请使用not null约束以及默认值。
 
（7）复合索引最左前缀，并不是值SQL语句的where顺序要和复合索引一致
用户中心建立了(login_name, passwd)的复合索引
select * from user where login_name=? and passwd=?
select * from user where passwd=? and login_name=?
都能够命中索引
 
select * from user where login_name=?
也能命中索引，满足复合索引最左前缀
 
select * from user where passwd=?
不能命中索引，不满足复合索引最左前缀
 
（8）使用ENUM而不是字符串
ENUM保存的是TINYINT，别在枚举中搞一些“中国”“北京”“技术部”这样的字符串，字符串空间又大，效率又低。
 
三、小众但有用的SQL实践
（9）如果明确知道只有一条结果返回，limit 1能够提高效率
select * from user where login_name=?
可以优化为：
select * from user where login_name=? limit 1
原因：
你知道只有一条结果，但数据库并不知道，明确告诉它，让它主动停止游标移动
 
（10）把计算放到业务层而不是数据库层，除了节省数据的CPU，还有意想不到的查询缓存优化效果
select * from order where date < = CURDATE()
这不是一个好的SQL实践，应该优化为：
$curDate = date('Y-m-d');
$res = mysql_query(
    'select * from order where date < = $curDate');
原因：
释放了数据库的CPU
多次调用，传入的SQL相同，才可以利用查询缓存
 
（11）强制类型转换会全表扫描
select * from user where phone=13800001234
你以为会命中phone索引么？大错特错了，这个语句究竟要怎么改？
 
末了，再加一条，不要使用select *（潜台词，文章的SQL都不合格 =_=），只返回需要的列，能够大大的节省数据传输量，与数据库的内存使用量哟。

(11)数据表数据特别大的时候批量查询时最好是先定位起始位置的主键id,不要用offset limit!!!
