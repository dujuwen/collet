1.查看mysql server启动状态
# systemctl status mysqld

2.通过mysql客户端登录和退出
shell> mysql -h host -u user -p

shell> mysql -h host -u user -p dbname
Enter password: *

shell> mysql -h host -u user -ppassword dbname
Enter password: *

mysql> QUIT/exit/crtl+D
Bye

3.mysql查询语句字母大小写不敏感,数据库名称和表名称是大小写敏感的
mysql> select VERSION(), version(), now(), user(), current_date;
+-----------+-----------+---------------------+----------------+--------------+
| VERSION() | version() | now()               | user()         | current_date |
+-----------+-----------+---------------------+----------------+--------------+
| 8.0.11    | 8.0.11    | 2018-06-04 10:11:50 | root@localhost | 2018-06-04   |
+-----------+-----------+---------------------+----------------+--------------+

4.创建数据库和查看当前数据库
mysql> create database test;
mysql> use test
mysql> select database(); //查看当前数据库

5.聚合查询除聚合字段之外的字段
https://dev.mysql.com/doc/refman/8.0/en/example-maximum-column-group-row.html

SELECT article, MAX(price) AS price FROM shop GROUP BY article;

要查询其他字段怎么办?LEFT JOIN:
SELECT s1.article, s1.dealer, s1.price
FROM shop s1
LEFT JOIN shop s2 ON s1.article = s2.article AND s1.price < s2.price
WHERE s2.article IS NULL;

6.使用用户自定义变量
mysql> SELECT @min_price:=MIN(price),@max_price:=MAX(price) FROM shop;
mysql> SELECT * FROM shop WHERE price=@min_price OR price=@max_price;

7.计算用户访问天数
https://dev.mysql.com/doc/refman/8.0/en/calculating-days.html

SELECT year,month,BIT_COUNT(BIT_OR(1<<day)) AS days FROM t1 GROUP BY year,month;
SELECT year,month,count(distinct day) AS days FROM t1 GROUP BY year,month;

1、BIT_COUNT( expr )：返回 expr 的二进制表达式中”1“的个数。
     例如：29 = 11101 则：BIT_COUNT（29）= 4；

2、BIT_OR( expr )：返回 expr 中所有比特的bitwise OR。计算执行的精确度为64比特(BIGINT) 。
　  例如：上面例子中，2000年02月中有一条2号的记录两条23号的记录，所以"1<<day"表示出来就是 “1＜＜2”和“1＜＜23”，
   得到二进制数 100 和 100000000000000000000000 。然后再OR运算。即 100 OR 10000000000000000000000 OR 10000000000000000000000 
   = 100000000000000000000100；这样再用BIT_COUNT处理得出的值就是2，自动去除了重复的日期。
   
8.mysql批处理数据,可以用于查询数据也可以批量导入数据
https://dev.mysql.com/doc/refman/8.0/en/batch-mode.html
# mysql -uroot -p -A test < /root/batch.sql
# mysql -uroot -p -A test < /root/batch.sql  > ./batch.out
mysql> source filename;
mysql> \. filename

9.修改自增长id
mysql> ALTER TABLE tbl AUTO_INCREMENT = 100;

10.mysql的选项 -N, --skip-column-names 在查询结果中不输出字段名称，在有些查询输出还是有用的

11.在mysql命令行登录的时候每次都要输入密码,可以修改配置文件不用输入密码:
https://dev.mysql.com/doc/refman/8.0/en/option-files.html

# vim /etc/my.conf

[client]
# The following password will be sent to all standard MySQL clients
password="my password"

[mysql]
connect_timeout=2
max_allowed_packet=64M # 等价于 mysql> SET GLOBAL max_allowed_packet=64M;
database=test
user=root
# password="my password" #这里的password是针对mysql命令行而言的

重启服务:
# systemctl restart mysqld

修改了配置文件后可以通过命令查看默认配置：
# mysql --print-defaults
mysql would have been started with the following arguments:
--password=*****

12.执行批处理
https://dev.mysql.com/doc/refman/8.0/en/mysql.html

shell> mysql db_name < script.sql > output.tab

13.修改配置文件my.conf添加mysql命令行配置:
https://dev.mysql.com/doc/refman/8.0/en/mysql-commands.html

# vim /etc/my.cnf
[mysqld]
default-authentication-plugin=mysql_native_password

datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
user=mysql
ssl-ca=/var/lib/mysql2/ca.pem
ssl-cert=/var/lib/mysql2/server-cert.pem
ssl-key=/var/lib/mysql2/server-key.pem

[mysql] #这一块客户端有需要的都可以添加
user=root
password=xxxxxxx
default-character-set=utf8
prompt="(\\u@\\h) [\\d] \\R:\\m:\\s >" #登录后有提示类似这样: (root@localhost) [djw] 21:04:51 >
tee=/tmp/mysql_client.log #操作日志记录到/tmp/mysql_client.log

[mysqladmin]
user=root
password=R2T%<ybxSsVG

重启数据库:
# systemctl restart mysqld 

14.mysql服务端帮助
(root@localhost) [(none)] 21:14:29 >help contents;
You asked for help about help category: "Contents"
For more information, type 'help <item>', where <item> is one of the following
categories:
   Account Management
   Administration
   Components
   Compound Statements
   Data Definition
   Data Manipulation
   Data Types
   Functions
   Functions and Modifiers for Use with GROUP BY
   Geographic Features
   Help Metadata
   Language Structure
   Plugins
   Storage Engines
   Table Maintenance
   Transactions
   User-Defined Functions
   Utility
   
15.mysqladmin
https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html

A client that performs administrative operations, such as creating or dropping databases, reloading the grant tables,
flushing tables to disk, and reopening log files. mysqladmin can also be used to retrieve version, process, and
status information from the server.

Where command is a one or more of: (Commands may be shortened)
  create databasename	Create a new database
  debug			Instruct server to write debug information to log
  drop databasename	Delete a database and all its tables
  extended-status       Gives an extended status message from the server
  flush-hosts           Flush all cached hosts
  flush-logs            Flush all logs
  flush-status		Clear status variables
  flush-tables          Flush all tables
  flush-threads         Flush the thread cache
  flush-privileges      Reload grant tables (same as reload)
  kill id,id,...	Kill mysql threads
  password [new-password] Change old password to new-password in current format
  ping			Check if mysqld is alive
  processlist		Show list of active threads in server
  reload		Reload grant tables
  refresh		Flush all tables and close and open logfiles
  shutdown		Take server down
  status		Gives a short status message from the server
  start-slave		Start slave
  stop-slave		Stop slave
  variables             Prints variables available
  version		Get version info from server

查看服务器状态信息,All commands can be shortened to any unique prefix.:
# mysqladmin proc stat  //是mysqladmin procsslist status的缩写
+----+-----------------+-----------+----+---------+------+------------------------+------------------+
| Id | User            | Host      | db | Command | Time | State                  | Info             |
+----+-----------------+-----------+----+---------+------+------------------------+------------------+
| 4  | event_scheduler | localhost |    | Daemon  | 217  | Waiting on empty queue |                  |
| 12 | root            | localhost |    | Query   | 0    | starting               | show processlist |
+----+-----------------+-----------+----+---------+------+------------------------+------------------+
Uptime: 217  Threads: 2  Questions: 13  Slow queries: 0  Opens: 110  Flush tables: 2  Open tables: 86  Queries per second avg: 0.059

16.

