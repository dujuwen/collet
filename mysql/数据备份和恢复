https://dev.mysql.com/doc/refman/8.0/en/backup-and-recovery.html

1.使用mysqldump进行全量备份
https://dev.mysql.com/doc/refman/8.0/en/backup-policy.html

shell > mysqldump --print-defaults
mysqldump would have been started with the following arguments:
--user=root --password=***** --user=root

shell> mysqldump --triggers --events --routines \
--single-transaction --flush-logs --master-data=2 --all-databases > backup_sunday_1_PM.sql

--delete-master-logs此选项的作用是在备份后删除无效的二进制日志，但是在有主从同步的时候要慎用，因为此时有可能从数据库还没有同步完成!!!

2.利用上面的逻辑备份加增量二进制日志进行恢复
https://dev.mysql.com/doc/refman/8.0/en/recovery-from-backups.html

在任何时候恢复数据的时候都要注意当前恢复数据操作是否需要写binlog，可以选择不写在完全恢复完成后再开启写binlog。

2.1) shell> cd path_to_back_sql_dir
shell> sed -i '1i\set session sql_log_bin=0;' 
shell> head -n 5 backup_djw.sql //检查
shell> echo "set session sql_log_bin=1;" >> backup_djw.sql
shell> mysql < backup_djw.sql

2.2) shell> cd path_to_binlog
shell> mysqlbinlog --disable-log-bin gbichot2-bin.000007 gbichot2-bin.000008 | mysql

--disable-log-bin, you will need a SUPER privilege to use thisoption.
mysqlbinlog还可以指定开始时间和结束时间

3.下面两种方式可以刷新日志，刷新的同时二进制日志会在新文件中开始记录
mysql> FLUSH LOGS
shell> mysqladmin flush-logs

会话变量sql_log_bin可以决定是否记录二进制日志，打开的时候会记录，关闭的时候不记录
(root) [djw] 15:10:53 >show variables like 'sql_log_bin';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| sql_log_bin   | OFF   |
+---------------+-------+
1 row in set (0.00 sec)

(root) [djw] 15:13:33 >set session sql_log_bin=1;
Query OK, 0 rows affected (0.00 sec)

(root) [djw] 15:13:43 >show variables like 'sql_log_bin';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| sql_log_bin   | ON    |
+---------------+-------+

4.前面的备份策略总结
https://dev.mysql.com/doc/refman/8.0/en/backup-strategy-summary.html

启动mysqld的时候必须指定--log-bin选项
定期使用mysqldump进行全量备份，它是在线的非阻塞的备份
定期使用刷新日志来进行二进制日志的增量备份
定期刷新日志的好处在于可以将二进制日志切割的很小这样在处理问题的时候掌控更加方便，在实际操作的时候可以每8个小时刷新一次!

5.备份数据为分割文件而不是sql，好处是每个表单独备份速度快，坏处是要手动恢复每个，可以写shell来完成这个操作
https://dev.mysql.com/doc/refman/8.0/en/mysqldump-delimited-text.html
也可以参见:
https://github.com/dujuwen/collet/blob/master/mysql/mysqldump

要注意的是 mysqlimport 如果服务器/etc/my.cnf里面有设置secure-file-priv那么导入的时候必须把路径前缀加上!!
mysqlimport 选项 dbname /var/lib/mysql-files/tablename.txt

查看secure_file_priv:
mysql> show variables like 'secure_file_priv';

6.备份的时候把触发器等一起备份了
https://dev.mysql.com/doc/refman/8.0/en/mysqldump-stored-programs.html

--events: Dump Event Scheduler events
--routines: Dump stored procedures and functions
--triggers: Dump triggers for tables

7.定点恢复
https://dev.mysql.com/doc/refman/8.0/en/point-in-time-recovery.html

查看所有binlog:
mysql> SHOW BINARY LOGS;

To determine the name of the current binary log file, issue the following statement:
mysql> SHOW MASTER STATUS;

shell> mysqlbinlog --stop-datetime="2005-04-20 9:59:59" \
         /var/log/mysql/bin.123456 | mysql -u root -p
shell> mysqlbinlog --start-datetime="2005-04-20 10:01:00" \
         /var/log/mysql/bin.123456 | mysql -u root -p
shell> mysqlbinlog /var/log/mysql/bin.123456 > /tmp/mysql_restore.sql   
shell> mysqlbinlog --start-datetime="2005-04-20 9:55:00" \
         --stop-datetime="2005-04-20 10:05:00" \
         /var/log/mysql/bin.123456 > /tmp/mysql_restore.sql

shell> mysqlbinlog --stop-position=368312 /var/log/mysql/bin.123456 \
         | mysql -u root -p
shell> mysqlbinlog --start-position=368315 /var/log/mysql/bin.123456 \
         | mysql -u root -p
         
