https://dev.mysql.com/doc/refman/8.0/en/account-management-sql.html

1.user,帐户名规则
https://dev.mysql.com/doc/refman/8.0/en/account-names.html

帐户名语法:
'user_name'@'host_name'
'me' is equivalent to 'me'@'%'
最好给用户名和主机名都带上引号

2.role，是一些权限的集合
https://dev.mysql.com/doc/refman/8.0/en/create-role.html
https://dev.mysql.com/doc/refman/8.0/en/drop-role.html
https://dev.mysql.com/doc/refman/8.0/en/roles.html

CREATE ROLE [IF NOT EXISTS] role [, role ] ...
例如:
CREATE ROLE 'administrator', 'developer';
CREATE ROLE 'webapp'@'localhost';

DROP ROLE [IF EXISTS] role [, role ] ...
Roles named in the mandatory_roles system variable value cannot be dropped.
DROP ROLE 'administrator', 'developer';
DROP ROLE 'webapp'@'localhost';

Creating Roles and Granting Privileges to Them:
CREATE ROLE 'app_developer', 'app_read', 'app_write';
GRANT ALL ON app_db.* TO 'app_developer';
GRANT SELECT ON app_db.* TO 'app_read';
GRANT INSERT, UPDATE, DELETE ON app_db.* TO 'app_write';

GRANT 'app_developer' TO 'dev1'@'localhost';
GRANT 'app_read' TO 'read_user1'@'localhost', 'read_user2'@'localhost';
GRANT 'app_read', 'app_write' TO 'rw_user1'@'localhost';

检查角色权限:
mysql> SHOW GRANTS FOR 'rw_user1'@'localhost' USING 'app_read', 'app_write';

收回角色权限:
REVOKE role FROM user;
REVOKE INSERT, UPDATE, DELETE ON app_db.* FROM 'app_write';

如果centos系统时间不正确的话执行命令: systemctl restart ntpd

3.grant和revoke
https://dev.mysql.com/doc/refman/8.0/en/grant.html
https://dev.mysql.com/doc/refman/8.0/en/revoke.html

3.1) 获取grant帮助
mysql> help grant;

在grant子句中有on关键词表示是授予权限，没有表示是授予角色，例如:
GRANT ALL ON db1.* TO 'jeffrey'@'localhost'; 
GRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';
GRANT SELECT ON world.* TO 'role3';

From the mysql program, GRANT responds with Query OK, 0 rows affected when executed successfully.

一般流程是：创建角色--给角色授予权限--创建带有密码的用户--将角色授予用户

由于_符号有特殊含义所有在设计数据库的时候不用_而用驼峰式:
GRANT ... ON `foo\_bar`.* TO ....

3.2) 获取revoke帮助
mysql> help revoke;

REVOKE INSERT ON *.* FROM 'jeffrey'@'localhost';
REVOKE 'role1', 'role2' FROM 'user1'@'localhost', 'user2'@'localhost';
REVOKE SELECT ON world.* FROM 'role3';
REVOKE ALL PRIVILEGES, GRANT OPTION FROM user_or_role [, user_or_role] ...

4.show grants
https://dev.mysql.com/doc/refman/8.0/en/show-grants.html

SHOW GRANTS
    [FOR user_or_role
        [USING role [, role] ...]]

user_or_role: {
    user
  | role
}

mysql> help show grants; //可以显示帮助授权命令

显示当前登录用户授权:
SHOW GRANTS;
SHOW GRANTS FOR CURRENT_USER;
SHOW GRANTS FOR CURRENT_USER();

A privileges granted an an account is always in effect, but a role is not. 
The active roles for an account can differ across and within sessions, depending on the value of the 
activate_all_roles_on_login system variable, the account default roles, and whether SET ROLE has been 
executed within a session.

5.set role, set default role
https://dev.mysql.com/doc/refman/8.0/en/set-role.html
https://dev.mysql.com/doc/refman/8.0/en/set-default-role.html

SET DEFAULT ROLE specifies which account roles are active by default. //指定默认激活的角色
SET ROLE changes the active roles within the current session. //在会话期间动态修改角色

SET ROLE
    {
        DEFAULT
      | NONE
      | ALL
      | ALL EXCEPT role [, role ] ...
      | role [, role ] ...
    }
    
SET ROLE DEFAULT;
SET ROLE 'role1', 'role2';
SET ROLE ALL;
SET ROLE ALL EXCEPT 'role1', 'role2';

SET DEFAULT ROLE
    {NONE | ALL | role [, role ] ...}
    TO user [, user ] ...
    
SET DEFAULT ROLE administrator, developer TO 'joe'@'10.0.0.1';

6.CREATE USER 和 ALTER USER
https://dev.mysql.com/doc/refman/8.0/en/create-user.html
https://dev.mysql.com/doc/refman/8.0/en/alter-user.html

6.1) CREATE USER [IF NOT EXISTS]
    user [auth_option] [, user [auth_option]] ...
    DEFAULT ROLE role [, role ] ...
    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]
    [WITH resource_option [resource_option] ...]
    [password_option | lock_option] ...
    
在命令行中获取帮助:
mysql> help create user;

CREATE USER 'name'@'localhost' IDENTIFIED BY 'password' [default role app_read@localhost ...];
CREATE USER 'jeffrey'@'localhost'IDENTIFIED WITH sha256_password BY 'new_password' [default role app_read@localhost ...];

在用户从本地客户端登录数据库的时候一定要加x509认证!!!

6.2) ALTER USER [IF EXISTS]
    user [auth_option] [, user [auth_option]] ...
    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]
    [WITH resource_option [resource_option] ...]
    [password_option | lock_option] ...

ALTER USER [IF EXISTS]
    USER() IDENTIFIED BY 'auth_string'
    
ALTER USER [IF EXISTS]
    user DEFAULT ROLE
    {NONE | ALL | role [, role ] ...}

修改密码后可能存在历史记录中，比如：~/.mysql_history，所以执行完修改用户密码后可以清空日志：echo > ~/.mysql_history

修改用户密码:
ALTER USER USER() IDENTIFIED BY 'auth_string';
ALTER USER 'jeffrey'@'localhost' IDENTIFIED WITH sha256_password BY 'new_password'

帐户锁定和解锁:
ALTER USER 'jeffrey'@'localhost' ACCOUNT LOCK;
ALTER USER 'jeffrey'@'localhost' ACCOUNT UNLOCK;

可以设置hash过后的密码这样不怕密码泄露:
ALTER USER 'jeffrey'@'localhost' IDENTIFIED WITH mysql_native_password AS '*6C8989366EAF75BB670AD8EA7A7FC1176A95CEF4';
hash值可以在本地测试后取得

修改用户需要x509证书认证:
ALTER USER 'jeffrey'@'localhost' REQUIRE X509;

修改用户的默认角色:
ALTER USER 'joe'@'10.0.0.1' DEFAULT ROLE administrator, developer;

7.



