http://caiknife.github.io/blog/2013/11/20/how-to-deal-with-dog-pile-effect/

什么是 Dog Pile Effect？
在缓存系统中，缓存总有失效的时候，比如我们经常使用的 Memcache 和 Redis ，都会设置超时时间；而一旦缓存到了超时时间失效之后，
如果此时再有大量的并发向数据库发起请求，就会造成服务器卡顿甚至是系统当机。这就是 Dog Pile Effect 。

避免这样的 Dog Pile 效应，通常有两种方法：

1.使用独立的更新进程,适合数据实时性要求不高的情况
使用独立的进程（比如 cron job）去更新缓存，而不是让 web 服务器即时更新数据缓存。
举个例子：一个数据统计需要每五分钟更新一次（但是每次计算过程耗时1分钟），那么可以使用 cron job 去计算这个数据，并更新缓存。
这样的话，数据永远都会存在，即使不存在也不用担心产生 Dog Pile 效应，因为客户端没有更新缓存的操作。这种方法适合不需要即时运算的全局数据。
但对用户对象、朋友列表、评论之类的就不太适用。

2.使用“锁”
除了使用独立的更新进程之外，我们也可以通过加“锁”，每次只允许一个客户端请求去更新缓存，以避免 Dog Pile 效应。

处理过程大概是这样的：
A 请求的缓存没命中
A 请求“锁住”缓存 key
B 请求的缓存没命中
B 请求需要等待直到“锁”释放
A 请求完成，并且释放“锁”
B 请求缓存命中（由于 A 的运算）
