https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS
https://zhuanlan.zhihu.com/p/24390509
http://www.ruanyifeng.com/blog/2016/04/cors.html
http://blog.csdn.net/saytime/article/details/51549888
https://www.cnblogs.com/sloong/p/cors.html
http://blog.csdn.net/u014344668/article/details/54948546

cors = cross-origin resource sharing(跨域资源共享)

同源是指协议和端口相同

CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。

整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。

因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。

CORS与JSONP
CORS与JSONP相比，更为先进、方便和可靠。

JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。

使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。

JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。 
对一个简单的请求，没有自定义头部，要么使用GET，要么使用POST，它的主体是text/plain,请求用一个名叫Orgin的额外的头部发送。Origin头部包含请求页面的头部（协议，域名，端口），这样服务器可以很容易的决定它是否应该提供响应。 
服务器端对于CORS的支持，主要就是通过设置Access-Control-Allow-Origin来进行的。
