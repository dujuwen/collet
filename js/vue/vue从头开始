vue api：
https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE
文档:
https://cn.vuejs.org/v2/guide/instance.html

1.vue-devtools
vue-devtools是一款基于chrome游览器的插件，用于调试vue应用，这可以极大地提高我们的调试效率。

可以通过chrome直接安装:
https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

也可以下载代码手动编译安装:
https://github.com/vuejs/vue-devtools
https://segmentfault.com/a/1190000009682735

2.vue的CDN
http://www.bootcdn.cn/vue/

3.安装
https://cn.vuejs.org/v2/guide/installation.html

4.箭头函数
https://www.cnblogs.com/fundebug/p/6904753.html
https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001438565969057627e5435793645b7acaee3b6869d1374000

箭头函数写代码拥有更加简洁的语法；
不会绑定this。

箭头函数的语法：
(parameters) => { statements }
如果没有参数，那么可以进一步简化：
() => { statements }
如果只有一个参数，可以省略括号:
parameters => { statements }

5.vue实例
https://cn.vuejs.org/v2/guide/instance.html

var data = { a: 1 }

// 直接创建一个实例
var vm = new Vue({
  data: data
})
vm.a // => 1
vm.$data === data // => true

// Vue.extend() 中 data 必须是函数
var Component = Vue.extend({
  data: function () {
    return { a: 1 }
  }
})

6.vue对象的生命周期
https://cn.vuejs.org/v2/guide/instance.html

7.vue在laravel中的使用问题

vue的{{}}分解符和laravel中的balde模板引擎的分解符会产生冲突
解决方法：使用vue的{{}}分解符的时候在前面加上@，【@{{  }}】

8.vue的计算属性会缓存而方法不会缓存结果
https://cn.vuejs.org/v2/guide/computed.html

var vm = new Vue({
  el: '#example',
  data: {
    message: 'Hello'
  },
  computed: {
    // 计算属性的 getter
    reversedMessage: function () {
      // `this` 指向 vm 实例
      return this.message.split('').reverse().join('')
    }
  }，
  // 方法
  methods: {
    reversedMessage: function () {
      return this.message.split('').reverse().join('')
    }
  }
})

9.class与style绑定
https://cn.vuejs.org/v2/guide/class-and-style.html

例如:
<div v-bind:class="[isActive ? activeClass : '', errorClass]"></div>
<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>

10.v-for可以渲染数组或者对象列表
https://cn.vuejs.org/v2/guide/list.html

<ul id="djw">
  <li v-for="item in items">
    {{ item.message }}
  </li>
</ul>

var djw = new Vue({
  el: '#djw',
  data: {
  	parentMessage: 'Parent',
  	items: [
  		{id:1, message: 'hahah1'},
  		{id:2, message: 'hahah2'},
  		{id:3, message: 'hahah13'},
  		{id:4, message: 'hahah4'}
  	]
  }
})

<div v-for="item in items" :key="item.id">  //:key是v-bind:key的缩写
  <!-- 内容 -->
</div>

v-for 也可以取整数。在这种情况下，它将重复多次模板:
<div>
  <span v-for="n in 10">{{ n }} </span>
</div>

类似于 v-if，你也可以利用带有 v-for 的 <template> 渲染多个元素。比如：
<ul>
  <template v-for="item in items">
    <li>{{ item.msg }}</li>
    <li class="divider" role="presentation"></li>
  </template>
</ul>

11.数组更新检测
https://cn.vuejs.org/v2/guide/list.html

Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下：
push()
pop()
shift()
unshift()
splice()
sort()
reverse()
你打开控制台，然后用前面例子的 items 数组调用变异方法：example1.items.push({ message: 'Baz' }) 。

12.事件处理
https://cn.vuejs.org/v2/guide/events.html

监听事件语法:
v-on:动作名称.其他动作="代码或者函数名称"
如:
<form v-on:submit.prevent="addNewTodo">
<button v-on:click="counter += 1">Add 1</button>

<div id="example-2">
  <!-- `greet` 是在下面定义的方法名 -->
  <button v-on:click="greet">Greet</button>
</div>

var example2 = new Vue({
  el: '#example-2',
  data: {
    name: 'Vue.js'
  },
  // 在 `methods` 对象中定义方法
  methods: {
    greet: function (event) {
      // `this` 在方法里指向当前 Vue 实例
      alert('Hello ' + this.name + '!')
      // `event` 是原生 DOM 事件
      if (event) {
        alert(event.target.tagName)
      }
    }
  }
})

// 也可以用 JavaScript 直接调用方法
example2.greet() // => 'Hello Vue.js!'

13.事件修饰符
https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6

在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在方法中轻松实现这点，
但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。
为了解决这个问题，Vue.js 为 v-on 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的:
.stop
.prevent
.capture
.self
.once
.passive
<!-- 阻止单击事件继续传播 -->
<a v-on:click.stop="doThis"></a>

<!-- 提交事件不再重载页面 -->
<form v-on:submit.prevent="onSubmit"></form>

<!-- 修饰符可以串联 -->
<a v-on:click.stop.prevent="doThat"></a>

<!-- 只有修饰符 -->
<form v-on:submit.prevent></form>

<!-- 添加事件监听器时使用事件捕获模式 -->
<!-- 即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理 -->
<div v-on:click.capture="doThis">...</div>

<!-- 只当在 event.target 是当前元素自身时触发处理函数 -->
<!-- 即事件不是从内部元素触发的 -->
<div v-on:click.self="doThat">...</div>

14.

