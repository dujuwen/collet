
1.页面跳转:
需求：从 index.wxml 页面,跳转到 aaa.wxml 页面

方法一：WXML页面实现
1.<navigator url = "/pages/aaa/aaa">跳转到新页面</navigator>
2.<navigator url = "/pages/aaa/aaa" open-type = "redirect">跳转到新页面</navigator>
3.<navigator url = "/pages/aaa/aaa" open-type = "switchTab">跳转到新页面</navigator>

方法二：js页面实现
bindViewTab:function(){
    wx.navigateTo({    //保留当前页面，跳转到应用内的某个页面（最多打开5个页面，之后按钮就没有响应的）
         url:"/pages/aaa/aaa"
    })
 
   wx.redirectTo({      //关闭当前页面，跳转到应用内的某个页面（这个跳转有个坑，就是跳转页面后页面会闪烁一下，完全影响了我自己的操作体验，太缺德了。）
          url:"/pages/aaa/aaa"
     })
     
  wx.reLaunch({     //跳转至指定页面并关闭其他打开的所有页面（这个最好用在返回至首页的的时候）
    url:'/pages/index/index'
  })

    wx.switchTab({    //跳转到tabBar页面，并关闭其他所有tabBar页面
           url:"/pages/aaa/aaa"
     })

    wx.navigateBack({     //返回上一页面或多级页面
          delta:1
    })
}

2.跳转的时候携带数据
https://www.cnblogs.com/caicaizi/p/6652103.html

// 源页面A相关代码
wx.navigateTo({
  url: "/pages/mypage/mypage?a=1&b=2"
})

// 目标页面B相关代码
Page({
  onLoad: function (options) {
    var a = options.a; // 值：1
    var b = options.b; // 值：2
  }
})

方法1：使用全局数据存储
将要传递的数据，存储在App对象上（比如globalData属性）。
将要传递的数据，存储在小程序的本地数据缓存（Storage）中。
例如，我们在将要退出页面B的时候，作如下调用：

//=== 1. 存储到app对象上的方式 ========
var app = getApp()
app.globalData.mydata = {a:1, b:2};  //存储数据到app对象上
wx.navigateBack();  //返回上一个页面

//=== 2.存储到数据缓存的方式 =========
wx.setStorage({
  key: "mydata",
  data: {a:1, b:2},
  success: function () {
    wx.navigateBack();   //返回上一个页面
  }
})

方法2：从页面路由栈中直接获取和操作目标Page对象
这种方式，是通过调用小程序的API: getCurrentPages()，来获取当前页面路由栈的信息，这个路由栈中按照页面的路由顺序存放着相应的Page对象，我们可以很容易的获取到上一级页面的完整Page对象，从而使直接调用Page对象的属性和方法成为可能。

如下所示：

var pages = getCurrentPages();
var currPage = pages[pages.length - 1];   //当前页面
var prevPage = pages[pages.length - 2];  //上一个页面

//直接调用上一个页面的setData()方法，把数据存到上一个页面中去
prevPage.setData({
  mydata: {a:1, b:2}
})

3.button组件样式
https://www.jianshu.com/p/93d7104be420

