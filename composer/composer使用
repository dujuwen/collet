Online installer:
curl -sS https://getcomposer.org/installer | php

Composer Cheat Sheet for developers:
http://composer.json.jolicode.com/

Composer中文文档:
https://docs.phpcomposer.com/

1.包版块
名称	       实例	   描述
确切的版本号	1.0.2	你可以指定包的确切版本。
范围	       >=1.0 >=1.0,<2.0 >=1.0,<1.1|>=1.2	通过使用比较操作符可以指定有效的版本范围。 有效的运算符：>、>=、<、<=、!=。 
你可以定义多个范围，用逗号隔开，这将被视为一个逻辑 AND 处理。一个管道符号|将作为逻辑 OR 处理。 AND 的优先级高于 OR。
通配符	      1.0.*	你可以使用通配符*来指定一种模式。1.0.*与>=1.0,<1.1是等效的。
赋值运算符	  ~1.2	这对于遵循语义化版本号的项目非常有用。

下一个重要版本（波浪号运算符）
~ 最好用例子来解释： ~1.2 相当于 >=1.2,<2.0，而 ~1.2.3 相当于 >=1.2.3,<1.3。正如你所看到的这对于遵循 语义化版本号 的项目最有用。
一个常见的用法是标记你所依赖的最低版本，像 ~1.2 （允许 1.2 以上的任何版本，但不包括 2.0）。由于理论上直到 2.0 应该都没有向后兼容性问题，
所以效果很好。你还会看到它的另一种用法，使用 ~ 指定最低版本，但允许版本号的最后一位数字上升。

2.对于项目请提交你应用程序的 composer.lock （包括 composer.json）到你的版本库中

3.在安装成功后优化自动加载器
//-o, --optimize-autoloader      Optimize autoloader during autoloader dump
https://docs.phpcomposer.com/03-cli.html

composer install -h
composer install -o

4.更新
为了获取依赖的最新版本，并且升级 composer.lock 文件，你应该使用 update 命令。

php composer.phar update
这将解决项目的所有依赖，并将确切的版本号写入 composer.lock。

如果你只是想更新几个包，你可以像这样分别列出它们：

php composer.phar update vendor/package vendor/package2
你还可以使用通配符进行批量更新：

php composer.phar update vendor/*

5.声明依赖require
交互式申请依赖:
php composer.phar require

不希望通过交互来指定依赖包，你可以在这条令中直接指明依赖包:
php composer.phar require vendor/package:2.* vendor/package2:dev-master

6.全局执行 global
global 命令允许你在 COMPOSER_HOME 目录下执行其它命令，像 install、require 或 update。

并且如果你将 $COMPOSER_HOME/vendor/bin 加入到了 $PATH 环境变量中，你就可以用它在命令行中安装全局应用，下面是一个例子：

php composer.phar global require fabpot/php-cs-fixer:dev-master
现在 php-cs-fixer 就可以在全局范围使用了（假设你已经设置了你的 PATH）。如果稍后你想更新它，你只需要运行 global update：

php composer.phar global update

7.展示 show
列出所有可用的软件包，你可以使用 show 命令。

php composer.phar show
如果你想看到一个包的详细信息，你可以输入一个包名称。

php composer.phar show monolog/monolog

8.依赖性检测 depends
depends 命令可以查出已安装在你项目中的某个包，是否正在被其它的包所依赖，并列出他们。

php composer.phar depends --link-type=require monolog/monolog

如果需要手动删除vendor下的包可以先进行依赖检测

9.依赖包状态检测 status
如果你经常修改依赖包里的代码，并且它们是从 source（自定义源）进行安装的，那么 status 命令允许你进行检查，如果你有任何本地的更改它将会给予提示。

php composer.phar status
你可以使用 --verbose 系列参数（-v|vv|vvv）来获取更详细的详细：

php composer.phar status -v

10.composer --prefer-dist和--prefer-source的区别
--prefer-dist 会从 github 上下载. zip 压缩包，并缓存到本地。下次再安装就会从本地加载，大大加速安装速度。但她没有保留 .git 文件夹, 没有版本信息。
适合基于这个 package 进行开发。

--prefer-source 会从 github 上 clone 源代码，不会在本地缓存。但她保留了. git 文件夹，从而可以实现版本控制。适合用于修改源代码。

11.有效性检测 validate
在提交 composer.json 文件和创建 tag 前，你应该始终运行 validate 命令。它将检测你的 composer.json 文件是否是有效的

php composer.phar validate

12.自我更新 self-update
将 Composer 自身升级到最新版本，只需要运行 self-update 命令。它将替换你的 composer.phar 文件到最新版本。
php composer.phar self-update

如果你想要升级到一个特定的版本，可以这样简单的指定它：
php composer.phar self-update 1.0.0-alpha7

如果你已经为整个系统安装 Composer（参见 全局安装），你可能需要在 root 权限下运行它：
sudo composer self-update

13.更改配置 config
config 命令允许你编辑 Composer 的一些基本设置，无论是本地的 composer.json 或者全局的 config.json 文件。
php composer.phar config --list

更改配置 - 使用方法
config [options] [setting-key] [setting-value1] ... [setting-valueN]

setting-key 是一个配置选项的名称，setting-value1 是一个配置的值。可以使用数组作为配置的值（像 github-protocols），多个 setting-value 是允许的。

14.创建项目 create-project
你可以使用 Composer 从现有的包中创建一个新的项目。这相当于执行了一个 git clone 或 svn checkout 命令后将这个包的依赖安装到它自己的 vendor 目录。

此命令有几个常见的用途：

你可以快速的部署你的应用。
你可以检出任何资源包，并开发它的补丁。
多人开发项目，可以用它来加快应用的初始化。
要创建基于 Composer 的新项目，你可以使用 "create-project" 命令。传递一个包名，它会为你创建项目的目录。你也可以在第三个参数中指定版本号，否则将获取最新的版本。

如果该目录目前不存在，则会在安装过程中自动创建。
php composer.phar create-project doctrine/orm path 2.2.*

15.打印自动加载索引 dump-autoload
某些情况下你需要更新 autoloader，例如在你的包中加入了一个新的类。你可以使用 dump-autoload 来完成，而不必执行 install 或 update 命令。

此外，它可以打印一个优化过的，符合 PSR-0/4 规范的类的索引，这也是出于对性能的可考虑。在大型的应用中会有许多类文件，而 autoloader 会占用每个请求的很大一部分时间，使用 classmaps 或许在开发时不太方便，但它在保证性能的前提下，仍然可以获得 PSR-0/4 规范带来的便利。


打印自动加载索引 - 参数
--optimize (-o): 转换 PSR-0/4 autoloading 到 classmap 获得更快的载入速度。这特别适用于生产环境，但可能需要一些时间来运行，因此它目前不是默认设置。
--no-dev: 禁用 autoload-dev 规则。

16.



