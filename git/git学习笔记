git中文手册:
https://git-scm.com/book/zh/v2

使用规范流程:
http://www.ruanyifeng.com/blog/2015/08/git-use-process.html

1.git变基的原则:
只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作

无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，
而合并是把最终结果合在一起。

merge和rebase的结果指向的快照是一样的，不一样的是提交的历史记录。merge会比rebase多一些。

2.git工作流比较:
https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#fork%E5%B7%A5%E4%BD%9C%E6%B5%81

总结:
对于小团队基于功能的工作流是比较推荐的
对于大型开发团队基于gitflow的工作流是比较推荐的
对于开源项目基于fork的工作流是比较推荐的

3.rm file 、git rm file 和 git rm --cached file的区别
rm file是直接将工作区域的文件删除，文件状态体现的是changes not staged for commit
git rm file是将文件删除的同时将文件改变添加到暂存区域，文件状态体现是changes to be committed
git rm --cached file是在rm file 和 git rm file的合并版，即在工作区域保留文件的同时从暂存区域去掉

4.在git中任何已提交的东西几乎总是可恢复的

5.git标签分为轻量标签和标注标签，如果忘了对过去的版本打标签后期也是可以打的，例如：
git tag -a tagname -m 'xxx' sha-1 id

共享标签
git push默认是不会将本地标签推送到远程仓库中的，可以使用下列命令推送标签：
git push --tags //一次将所有没有推送的标签推送到远程仓库
git push origin tagname //将某一个版本的标签推送到远程仓库中

6.如何在特定版本上检出新的分支
git checkout -b [branchname] [tagname] //在特定的标签上创建一个新分支

7.别名
在使用git的时候可以使用git自带的定义简短的别名，也可以使用系统自带的alias命令(linux系统)来定义更简短的别名
使用git自带的定义别名:
git config --global alias.sta status //定义了全局的别名sta，以后git sta等价于git status

8.推送
运行 git push (remote) (branch):
$  git push origin serverfix

这里有些工作被简化了。
Git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix，那意味着，
“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 你也可以运行 git push origin serverfix:serverfix，它会做同样的事 - 
相当于它说，“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。
如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程
仓库上的 awesomebranch 分支。

9.跟踪分支
git checkout -b [branch] [remotename]/[branch] //新检出的分支默认会跟踪远程对应分支

如何显示设置跟踪分支呢?
可以使用git branch 或者 git push设置
git branch -u [remotename]/[branch]
git push -u [remotename]/[branch]

如何查看当前分支跟踪的是远程哪个分支呢?
可以使用git status或者git remote show origin命令

查看所有分支的跟踪情况:
git branch -vv

需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。
如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：
$ git fetch --all; git branch -vv

10.删除远程分支
$ git push origin --delete branchname

