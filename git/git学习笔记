git中文手册:
https://git-scm.com/book/zh/v2

使用规范流程:
http://www.ruanyifeng.com/blog/2015/08/git-use-process.html

1.git变基的原则:
只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作

无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，
而合并是把最终结果合在一起。

merge和rebase的结果指向的快照是一样的，不一样的是提交的历史记录。merge会比rebase多一些。

https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA
在client分支上执行:
$ git rebase --onto master server client
以上命令的意思是：
“取出 client 分支，找出处于 client 分支和 server 分支的共同祖先之后的修改，然后把它们在 master 分支上重放一遍”。

git pull --rebase 等价于先 git fetch，再 git rebase teamone/master。

如果习惯使用 git pull ，同时又希望默认使用选项 --rebase，可以执行这条语句 git config --global pull.rebase true 来更改 pull.rebase 的默认配置。

只要把变基命令当作是在推送前清理提交使之整洁的工具，并且只在从未推送至共用仓库的提交上执行变基命令，就不会有事。

2.git工作流比较:
https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#fork%E5%B7%A5%E4%BD%9C%E6%B5%81

总结:
对于小团队基于功能的工作流是比较推荐的
对于大型开发团队基于gitflow的工作流是比较推荐的
对于开源项目基于fork的工作流是比较推荐的

3.rm file 、git rm file 和 git rm --cached file的区别
rm file是直接将工作区域的文件删除，文件状态体现的是changes not staged for commit
git rm file是将文件删除的同时将文件改变添加到暂存区域，文件状态体现是changes to be committed
git rm --cached file是在rm file 和 git rm file的合并版，即在工作区域保留文件的同时从暂存区域去掉

4.在git中任何已提交的东西几乎总是可恢复的

5.git标签分为轻量标签和标注标签，如果忘了对过去的版本打标签后期也是可以打的，例如：
git tag -a tagname -m 'xxx' sha-1 id

共享标签
git push默认是不会将本地标签推送到远程仓库中的，可以使用下列命令推送标签：
git push --tags //一次将所有没有推送的标签推送到远程仓库
git push origin tagname //将某一个版本的标签推送到远程仓库中

6.如何在特定版本上检出新的分支
git checkout -b [branchname] [tagname] //在特定的标签上创建一个新分支

7.别名
在使用git的时候可以使用git自带的定义简短的别名，也可以使用系统自带的alias命令(linux系统)来定义更简短的别名
使用git自带的定义别名:
git config --global alias.sta status //定义了全局的别名sta，以后git sta等价于git status

8.推送
运行 git push (remote) (branch):
$  git push origin serverfix

这里有些工作被简化了。
Git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix，那意味着，
“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 你也可以运行 git push origin serverfix:serverfix，它会做同样的事 - 
相当于它说，“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。
如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程
仓库上的 awesomebranch 分支。

9.跟踪分支
git checkout -b [branch] [remotename]/[branch] //新检出的分支默认会跟踪远程对应分支

如何显示设置跟踪分支呢?
可以使用git branch 或者 git push设置
git branch -u [remotename]/[branch]
git push -u [remotename]/[branch]

如何查看当前分支跟踪的是远程哪个分支呢?
可以使用git status或者git remote show origin命令

查看所有分支的跟踪情况:
git branch -vv

需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。
如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：
$ git fetch --all; git branch -vv

10.删除远程分支
$ git push origin --delete branchname

11.配置服务器
https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8
$ sudo adduser git
$ su git
$ cd
$ mkdir .ssh && chmod 700 .ssh
$ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys

12.提交区间，双点，多点，三点语法
https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%80%89%E6%8B%A9%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC

//在develop中当时不在master中的日志
$ git log master..develop 

下列 3 个命令是等价的：
$ git log refA..refB
$ git log ^refA refB
$ git log refB --not refA

这个语法可以选择出被两个引用中的一个包含但又不被两者同时包含的提交
$ git log --left-right master...experiment

13.git搜索
https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E6%90%9C%E7%B4%A2

$ git grep --count gmtime_r
$ git log -SZLIB_BUF_MAX --oneline

14.git重写历史，拆分提交，合并提交，修改提交历史中的邮箱等等
https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2

15.高级合并
https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%AB%98%E7%BA%A7%E5%90%88%E5%B9%B6

合并冲突:
Stage 1 是它们共同的祖先版本，stage 2 是你的版本，stage 3 来自于 MERGE_HEAD，即你将要合并入的版本（“theirs”）。

通过 git show 命令与一个特别的语法，你可以将冲突文件的这些版本释放出一份拷贝。
$ git show :1:hello.rb > hello.common.rb
$ git show :2:hello.rb > hello.ours.rb
$ git show :3:hello.rb > hello.theirs.rb

如果你想要更专业一点，也可以使用 ls-files -u 底层命令来得到这些文件的 Git blob 对象的实际 SHA-1 值。
$ git ls-files -u
100755 ac51efdc3df4f4fd328d1a02ad05331d8e2c9111 1	hello.rb
100755 36c06c8752c78d2aff89571132f3bf7841a7b5c3 2	hello.rb
100755 e85207e04dfdd5eb0a1e9febbc67fd837c44a1cd 3	hello.rb

可以使用git diff --ours/--theirs/--base对比冲突

在合并产生冲突的时候如何简单的只保留一边呢?
只保留当前分支的(我们的):
$ git checkout --ours webpack.mix.js

只保留待合并分支上的:
$ git checkout --theirs webpack.mix.js

可以传递给 --conflict 参数 diff3 或 merge（默认选项）。 如果传给它 diff3，Git 会使用一个略微不同版本的冲突标记：
不仅仅只给你 “ours” 和 “theirs” 版本，同时也会有 “base” 版本在中间来给你更多的上下文。
$ git checkout --conflict=diff3 webpack.mix.js

如果你喜欢这种格式，可以通过设置 merge.conflictstyle 选项为 diff3 来做为以后合并冲突的默认选项。
$ git config --global merge.conflictstyle diff3

16.理解冲突是如何产生的
https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%AB%98%E7%BA%A7%E5%90%88%E5%B9%B6

$ git log --oneline --left-right --merge -p

17.使用git进行调试
https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Git-%E8%B0%83%E8%AF%95

如何查看一个文件中某些行内容是谁在什么时候修改的?
$ git blame -L 12,22 simplegit.rb

18.二分查找
bisect 命令会对你的提交历史进行二分查找来帮助你尽快找到是哪一个提交引入了问题
$ git bisect start
$ git bisect bad
$ git bisect good v1.0
...
$ git bisect reset

19.git存储凭证
https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8

20.git配置
https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git
配置的优先级:
.git/config > ~/.gitconfig > /etc/gitconfig
分别对应级别是:
--local > --global > --system

可以把 core.autocrlf 设置成 input 来告诉 Git 在提交时把回车和换行转换成换行，检出时不转换：
$ git config --global core.autocrlf input




