https://blog.csdn.net/wwh578867817/article/details/46707389

1.停用系统自带的防火墙和清除iptables
# systemctl stop firewalld.service
# systemctl disable firewalld.service

# iptables -L //查看
# iptables -F //清除

2.man中文版:
$ yum search man | grep -i zh-cn
man-pages-zh-CN.noarch : Chinese Man Pages from Chinese Man Pages Project
$ yum -y install man-pages-zh-CN.noarch

3.调整nofile、nproc值:
/etc/security/limits.conf中指定的nofile的值，nofile有上限，不是无穷大。nofile由内核参数nr_open定义的
使用cat /proc/sys/fs/nr_open 查看nr_open值，可通过修改/ect/sysct.conf 修改fs.nr_open值，sysctl -p生效

file-max是系统所有进程一共可以打开的文件数量
$ cat /proc/sys/fs/file-max
echo  6553560 > /proc/sys/fs/file-max

或修改 /etc/sysctl.conf, 加入
fs.file-max = 6553560
如果有修改文件的话可以通过命令 sysctl -p 来使修改文件生效

也可以通过命令来修改:
sysctl fs.file-max=6553560

nr_open是单个进程可分配的最大文件数
$ cat /proc/sys/fs/nr_open
1048576

ulimit设置当前shell以及由它启动的进程的资源限制

# vim /etc/security/limits.conf
*       soft    nofile    1024000
*       hard    nofile    1024000
*       soft    nproc     100000
*       hard    nproc     100000

# l /etc/security/limits.d/*
-rw-r--r--. 1 root root 191 4月  11 11:22 /etc/security/limits.d/20-nproc.conf

# vim /etc/security/limits.d/20-nproc.conf
*       soft    nproc     100000
*       hard    nproc     100000
root       soft    nproc     unlimited

调整完成后重启系统，通过下面方式来确认:
$ cat /proc/sys/fs/file-max
$ cat /proc/sys/fs/nr_open
$ ulimit -a
系统总限制 > 单个进程限制
系统总限制 > shell限制

4.vim基本设置
set history=1000
autocmd InsertLeave * se cul
autocmd InsertLeave * se nocul
set nu
set bs=2
syntax on
set laststatus=2
set tabstop=4
set go=
set ruler
set showcmd
set cmdheight=1
hi CursorLine   cterm=NONE ctermbg=blue ctermfg=white guibg=blue guifg=white
set hls
set cursorline
set ignorecase
set hlsearch
set incsearch
set helplang=cn
 
 
inoremap ( ()<ESC>i       
inoremap [ []<ESC>i
inoremap { {}<ESC>i
inoremap < <><ESC>i
inoremap " ""<ESC>i
inoremap ' ''<ESC>i

5.查看系统时间
# timedatectl
      Local time: 三 2018-05-30 10:59:17 CST
  Universal time: 三 2018-05-30 02:59:17 UTC
        RTC time: 三 2018-05-30 02:59:17
       Time zone: Asia/Shanghai (CST, +0800)
     NTP enabled: n/a
NTP synchronized: yes
 RTC in local TZ: no
      DST active: n/a

6.ssh配置文件位置
/etc/ssh/sshd_config 
在任何修改sshd配置之前都先备份一下:
cp /etc/ssh/sshd_config /etc/ssh/sshd_config_origin.bak

7.centos内核优化
https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/performance_tuning_guide/sect-red_hat_enterprise_linux-performance_tuning_guide-memory-configuration_tools

查看配置文件位置
# cat /etc/sysctl.conf

# l /usr/lib/sysctl.d/*
-rw-r--r--. 1 root root  293 4月  11 13:09 /usr/lib/sysctl.d/00-system.conf
-rw-r--r--. 1 root root 1.8K 4月  11 13:10 /usr/lib/sysctl.d/10-default-yama-scope.conf
-rw-r--r--. 1 root root 1.2K 4月  11 15:36 /usr/lib/sysctl.d/50-default.conf

# vim /usr/lib/sysctl.d/00-system.conf
也可以通过命令sysctl -w 来修改，但是想永久生效的话必须修改配置文件

添加:
#关闭ipv6
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
# 避免放大攻击
net.ipv4.icmp_echo_ignore_broadcasts = 1
#修改消息队列长度
kernel.msgmnb = 65536
kernel.msgmax = 65536
#设置最大内存共享段大小bytes
kernel.shmmax = 68719476736
kernel.shmall = 4294967296
#每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目
net.core.netdev_max_backlog = 262144
#限制仅仅是为了防止简单的DoS 攻击
net.ipv4.tcp_max_orphans = 3276800
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_max_syn_backlog = 1024
net.core.somaxconn = 1024 #限制了接收新 TCP 连接侦听队列的大小
#fin_wait1状态是在发起端主动要求关闭tcp连接，并且主动发送fin以后，等待接收端回复ack时候的状态。对于本端断开的socket连接，
#TCP保持在FIN-WAIT-2状态的时间。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。
net.ipv4.tcp_keepalive_time = 1200 #表示当keepalive起用的时候,TCP发送keepalive消息的频度。缺省是2小时
net.ipv4.ip_local_port_range = 1024 65000

使设置生效:
sysctl -p

8.overcommit_memory
https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/performance_tuning_guide/sect-red_hat_enterprise_linux-performance_tuning_guide-memory-configuration_tools

内核参数overcommit_memory它是内存分配策略
可选值：0、1、2。
0， 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。
1， 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。
2， 表示内核允许分配超过所有物理内存和交换空间总和的内存

什么是Overcommit和OOM？
Linux对大部分申请内存的请求都回复"yes"，以便能跑更多更大的程序。因为申请内存后，并不会马上使用内存。这种技术叫做Overcommit。
当linux发现内存不足时，会发生OOM killer(OOM=out-of-memory)。它会选择杀死一些进程(用户态进程，不是内核线程)，以便释放内存。

要将 overcommit_memory 参数暂时设置为 1：
# echo 1 > /proc/sys/vm/overcommit_memory

要永久设置这个值，请运行以下指令：
# sysctl vm.overcommit_memory=1

9.
