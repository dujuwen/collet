https://cnodejs.org/topic/50463565329c5139760c34a1
http://www.cnblogs.com/bangerlee/archive/2013/04/06/3002142.html
https://www.cnblogs.com/lovesong/p/5199623.html

XSS 是什么？它的全名是：Cross-site scripting，为了和 CSS 层叠样式表区分所以取名 XSS

xss 表示 Cross Site Scripting(跨站脚本攻击)，它与 SQL 注入攻击类似，SQL 注入攻击中以 SQL 语句作为用户输入，
从而达到查询 / 修改 / 删除数据的目的，而在 xss 攻击中，通过插入恶意脚本，实现对用户游览器的控制。

xss 攻击可以分成两种类型：
非持久型攻击
持久型攻击

记住这句话：所有的输入都是有害的。

1. 前端在显示服务端数据时候，不仅是标签内容需要过滤、转义，就连属性值也都可能需要。
2. 后端接收请求时，验证请求是否为攻击请求，攻击则屏蔽。

1. 首要是服务端要进行过滤，因为前端的校验可以被绕过。
2. 当服务端不校验时候，前端要以各种方式过滤里面可能的恶意脚本，例如 script 标签，将特殊字符转换成 HTML 编码。

使用 HTTPS！

XSS 攻击的特点就是：尽一切办法在目标网站上执行非目标网站上原有的脚本。
前两种 XSS 攻击是我们开发时候要注意的，而流量劫持的则可以使用 HTTPS 提高安全性。

XSS 的防御措施:
（1）编码：对用户输入的数据进行 HTML Entity 编码 
（2）过滤：移除用户上传的 DOM 属性，如 onerror 等，移除用户上传的 style 节点，script 节点，iframe 节点等。
（3）校正：避免直接对 HTML Entity 编码，使用 DOM Prase 转换，校正不配对的 DOM 标签。


XSS 是什么？它的全名是：Cross-site scripting，为了和 CSS 层叠样式表区分所以取名 XSS。是一种网站应用程序的安全漏洞攻击，是代码注入的一种。
它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了 HTML 以及用户端脚本语言。
而 CSRF 是什么呢？CSRF 全名是 Cross-site request forgery，是一种对网站的恶意利用，CSRF 比 XSS 更具危险性。
想要深入理解 CSRF 的攻击特性我们有必要了解一下网站 session 的工作原理。

理解 session。
比如我买了一张高尔夫俱乐部的会员卡，俱乐部给了我一张带有卡号的会员卡。
我能享受哪些权利（比如我是高级会员卡可以打 19 洞和后付费喝饮料，而初级会员卡只能在练习场挥杆）以及我的个人资料都是保存在高尔夫俱乐部的数据库里的。
我每次去高尔夫俱乐部只需要出示这张高级会员卡，俱乐部就知道我是谁了，并且为我服务了。

这里我们的高级会员卡卡号 = 保存在 cookie 的 sessionid；
而我的高级会员卡权利和个人信息就是服务端的 session 对象了。

CSRF 也就很容易理解了。CSRF 攻击就相当于恶意用户 A 复制了我的高级会员卡，
哪天恶意用户 A 也可以拿着这张假冒的高级会员卡去高尔夫俱乐部打 19 洞，享受美味的饮料了，而我在月底就会收到高尔夫俱乐部的账单！


CSRF 的防御措施：
1. 判断请求头中的 Referer
2. 在请求参数中加入 csrf token
3. 新增 HTTP Header(例jwt) 

JWT的使用场景：
1. 一次性验证
比如用户注册后需要发一封邮件让其激活账户，通常邮件中需要有一个链接，这个链接需要具备以下的特性：
能够标识用户，该链接具有时效性（通常只允许几小时之内激活），不能被篡改以激活其他可能的账户… 这种场景就和 jwt 的特性非常贴近，
jwt 的 payload 中固定的参数：iss 签发者和 exp 过期时间正是为其做准备的。

2. restful api 的无状态认证(一次性使用)
使用 jwt 来做 restful api 的身份认证也是值得推崇的一种使用方案。客户端和服务端共享 secret；
过期时间由服务端校验，客户端定时刷新；签名信息不可被修改… spring security oauth jwt 提供了一套完整的 jwt 认证体系
。使用 oauth2 或 jwt 来做 restful api 的认证都没有大问题，oauth2 功能更多，支持的场景更丰富，后者实现简单。


http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/

JWT主要的缺点是在token生成后不能被废弃或者更新并且会引入大小问题和安全问题(取决于如何存储这些token)
结论: JWT适合用于无状态单次使用，并且token的有效时间应该尽可能的短。

有状态的应该还是会使用session。




