http://showme.codes/2017-02-20/understand-https/
https://blog.csdn.net/m0_37076574/article/details/81663104

1.密码学领域中，有一种称为“非对称加密”的加密算法
特点是私钥加密后的密文，只要是公钥，都可以解密，但是公钥加密后的密文，只有私钥可以解密。私钥只有一个人有，而公钥可以发给所有的人

2.协商什么加密算法
要达到Web服务器针对每个客户端使用不同的对称加密算法，同时，我们也不能让第三者知道这个对称加密算法是什么，怎么办？
使用随机数，就是使用随机数来生成对称加密算法。这样就可以做到服务器和客户端每次交互都是新的加密算法、只有在交互的那一该才确定加密算法。

所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。

证书就是HTTPS中数字证书，证书编号就是数字签名，而第三方机构就是指数字证书签发机构（CA）

http握手和证书验证，为了让客户端与服务器端安全地协商出一个对称加密算法。这就是HTTPS中的SSL/TLS协议主要干的活。

例如针对C/S模型， 
1. 服务端计算出一对秘钥pub/pri。将私钥保密，将公钥公开。 
2. 客户端请求服务端时，拿到服务端的公钥pub。 
3. 客户端通过AES计算出一个对称加密的秘钥X。 然后使用pub将X进行加密。 
4. 客户端将加密后的密文发送给服务端。服务端通过pri解密获得X。 
5. 然后两边的通讯内容就通过对称密钥X以对称加密算法来加解密。

3.数字签名
明文 --> hash运算 --> 摘要 --> 私钥加密 --> 数字签名

就是采用摘要算法对传输的数据提取出摘要，并且用自己的私钥进行加密。这个数字签名会和报文一起发送给接收方。 

4.验证数字签名
首先用公钥解密，然后计算摘要进行对比，符合则签名没问题

5.TCP三次握手
位码即tcp标志位,有6种标示:
SYN(synchronous建立联机)
ACK(acknowledgement 确认)
PSH(push传送)
FIN(finish结束)
RST(reset重置)
URG(urgent紧急)

Sequence number(顺序号码) Acknowledge number(确认号码)

在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接:
第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认； 
第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 
第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 
完成三次握手，客户端与服务器开始传送数据.

6.TLS握手协商流程
要想清楚TLS握手的细节流程，那么首先要明确TLS握手是为了干什么，TLS握手是为了建立安全的链接通道，保证数据传输的安全性，不被窃听和篡改。
它使用了非对称加密算法和对称加密算法。并且通过非对称加密算法来产生对称加密算法。

一下是一个以RSA算法的握手过程。

第一步：Client Hello，客户端发起连接请求，并提供支持的加密套间，版本，以及产生一个随机数Random1.

第二步：Server Hello，服务端选择合适的加密套件和版本，产生一个随机数Random2.

第三步：Certificate 服务端将自己的证书发送给客户端。

第四步：Server Hello Done 服务端表示Server Hello结束

第五步：Certificate Verify 客户端校验证书。生成Random3，使用Random1，Random2，Random3生成PreMaster key并使用公钥进行加密。

第六步：Client Key Exchange，将PreMaster Key发送给服务端，并使用算法计算出对称加密密钥。服务端收到后，可以将PreMaster 
解密，得到Random3，并使用Random1，2，3计算出对称加密密钥。

第七步：Client Cipher Spec Spec，这是一个通知消息，客户端通知服务端，编码改变：之后的消息，都通过对称加密来进行。

第八步：Encrypted HandShake Message 
这是一个finish消息，表示客户端握手完成，并且将之前的握手消息使用协商好的密钥进行加密，发送给服务端。服务端收到后，对消息进行解密，如果能解密成功，则表明双方是同一个密钥。

第九步：Change Cipher Spec 
这一步是服务端发出的消息改变通知。

第十步：Encrypted HandShacke Message 
这是服务端发出的finish消息，使用对称密钥，将之前的握手消息加密发送给客户端，拿给客户端解密。这一步结束之后。TLS连接正式建立。

