http://nginx.org/en/docs/http/configuring_https_servers.html
https://aotu.io/notes/2016/08/16/nginx-https/index.html

优化后的综合配置:

worker_processes auto;
http {
    #配置共享会话缓存大小，视站点访问情况设定
    ssl_session_cache   shared:SSL:10m;
    #配置会话超时时间
    ssl_session_timeout 10m;
    server {
        listen              443 ssl;
        server_name         www.example.com;
        
        #设置长连接
        keepalive_timeout   70;
        
        #HSTS策略
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        #证书文件
        ssl_certificate     www.example.com.crt;
        #私钥文件
        ssl_certificate_key www.example.com.key; 
        
        #优先采取服务器算法
        ssl_prefer_server_ciphers on;
        #使用DH文件
        ssl_dhparam /etc/ssl/certs/dhparam.pem;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        #定义算法
        ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";
        #减少点击劫持
        add_header X-Frame-Options DENY;
        #禁止服务器自动解析资源类型
        add_header X-Content-Type-Options nosniff;
        #防XSS攻擊
        add_header X-Xss-Protection 1;
        
在 Nginx 下配置 HTTPS 的关键要点：

获得 SSL 证书
  通过 OpenSSL 命令获得 example.key 和 example.csr 文件
  提供 example.csr 文件给第三方可靠证书颁发机构，选择适合的安全级别证书并签署，获得 example.crt 文件
通过 listen 命令 SSL 参数以及引用 example.key 和 example.crt 文件完成 HTTPS 基础配置

HTTPS 优化
  减少 CPU 运算量
    使用 keepalive 长连接
    复用 SSL 会话参数
  使用 HSTS 策略强制浏览器使用 HTTPS 连接
    添加 Strict-Transport-Security 头部信息
    使用 HSTS 预加载列表（HSTS Preload List）
  加强 HTTPS 安全性
    使用迪菲 - 赫尔曼密钥交换（D-H，Diffie–Hellman key exchange）方案
    添加 X-Frame-Options 头部信息，减少点击劫持
    添加 X-Content-Type-Options 头部信息，禁止服务器自动解析资源类型
    添加 X-Xss-Protection 头部信息，防 XSS 攻击
    
HTTP/HTTPS 混合服务器配置

基于服务器名称（name-based）的 HTTPS 服务器
  为每个 HTTPS 服务器分配独立的 IP 地址
  泛域证书
  域名标识（SNI）
