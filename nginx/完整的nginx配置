nginx安装配置完整版:
https://segmentfault.com/a/1190000002797601

user nginx; 
#这里在线上应该将nginx程序设置为root所有者,chown root /path/to/nginx,chmod u+s /path/to/nginx,然后这里设置了用户才不会出错

worker_processes auto;
worker_cpu_affinity auto; #利用多核cpu来提高nginx性能
worker_rlimit_nofile 65535; #不能超过ulimit -n的值,同时最大打开文件数,这个值尽量调整大点

error_log /var/log/nginx/error.log notice;
#可选的日志级别 debug(需要在编译的时候加上--with-debug), info, notice, warn, error, crit, alert, or emerg

pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
# include /usr/share/nginx/modules/*.conf; #这里看实际情况再定

charset utf-8; #Adds the specified charset to the “Content-Type” response header field

events {
    use epoll; #linux下这样设定
    worker_connections 1024; #这里可以根据情况调整,worker_rlimit_nofile对这里有影响
}

http {
    server_tokens off; #响应的时候不显示nginx版本信息

    client_header_buffer_size 4k;
    client_body_buffer_size 256k;
    large_client_header_buffers 8 8k;

    open_file_cache max=65535; #文件缓存
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    server_names_hash_bucket_size 128;
    server_names_hash_max_size 1024;
    
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/logs/access.log  main buffer=32k; #access log应该开启写入缓存,如果pv很大的话可以考虑使用第三方服务

    sendfile on; #如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime
    tcp_nopush on;
    tcp_nodelay on;

    #gzip压缩功能设置
    gzip on;
    gzip_min_length 1k;
    gzip_buffers    4 16k;
    gzip_comp_level 1;
    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
    gzip_vary on;
    gzip_proxied   expired no-cache no-store private auth;
    gzip_disable   "MSIE [1-6]\.";
    
    proxy_buffer_size 16k;
    proxy_buffers 4 32k;
    proxy_busy_buffers_size 256k;

    fastcgi_buffer_size 16k;
    fastcgi_buffers 8 32k;
    fastcgi_busy_buffers_size 64k;
    fastcgi_temp_file_write_size 512k;

    #将无用的连接尽快设置为超时,可以保护服务器的系统资源（CPU、内存、磁盘）
    client_header_timeout 15;
    clietn_body_timeout 15;
    #send_timeout 15;
    
    #client_max_body_size 10m;      #具体数字要根据业务需求决定
    
    server {
        listen       8000;
        server_name  test.loc;

        root /Users/dujunwen/project/github/LieToMe/public;
        index  index.php index.html index.htm;
        
        location / {
           try_files $uri $uri/ /index.php?$args;
        }

        #还可以将静态文件特殊处理
        location /assets/(js|css|images)/ {
            #todo
        }

        error_page   404 /404.html;
        location = /404.html {
            root /usr/local/Cellar/nginx/1.6.2/html;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/local/Cellar/nginx/1.6.2/html;
        }

        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 1d;
            add_header Cache-Control "max-age=86400, public";
        }

        location ~ "^(.+\.php)($|/)" {
            fastcgi_index index.php;
            try_files $uri $uri/ /index.php?$args =404; #=404一定要加上，找不到就跳到404页面
            include        fastcgi_params;
            fastcgi_split_path_info ^(.+\.php)(.*)$;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_pass   127.0.0.1:9000;
        }
    }
}

