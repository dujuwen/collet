http://nginx.org/en/docs/
https://tengine.taobao.org/nginx_docs/cn/
https://weizhimiao.github.io/2016/10/03/Nginx%E9%85%8D%E7%BD%AE%E6%95%B4%E7%90%86/

nginx第三方模块
https://www.nginx.com/resources/wiki/modules/index.html

调试nginx的时候可以将daemon设置为off
Syntax:	daemon on | off;
Default:	daemon on;
Context:	main


1.单个指令
http://nginx.org/en/docs/beginners_guide.html

nginx consists of modules which are controlled by directives specified in the configuration file. 
Directives are divided into simple directives and block directives.
A simple directive consists of the name and parameters separated by spaces and ends with a semicolon (;).
A block directive has the same structure as a simple directive, but instead of the semicolon it ends with a set of additional
instructions surrounded by braces ({ and }). If a block directive can have other directives inside braces,
it is called a context (examples: events, http, server, and location).

Directives placed in the configuration file outside of any contexts are considered to be in the main context.
The events and http directives reside in the main context, server in http, and location in server.
The rest of a line after the # sign is considered a comment.

2.获取静态资源配置
server {
    listen 80;
    server_name loc.nginx.t;

    location / {
        root  /Users/dujunwen/Desktop/test/data;
        index test.html;
    }

    location /images/ {
        root  /Users/dujunwen/Desktop/test/data;
    }
}

上面配置可以简写为:
server {
    # 默认监听的就是80端口
    server_name loc.nginx.t;
    root /Users/dujunwen/Desktop/test/data;

    location / {
        index test.html;
    }
}
现在访问图片需要输入http://loc.nginx.t/images/zan.png

在上面的基础上扩展:
server {
    server_name loc.nginx.t;
    root /Users/dujunwen/Desktop/test/data;

    location / {
        index test.html;
    }

    location ~ \.(gif|jpg|png)$ {
        root /Users/dujunwen/Desktop/test/data/images;
    }
}
现在访问图片只需要输入http://loc.nginx.t/zan.png

root指令后面指定的路径如果是以/开头那么就是从根目录下查找，如果不以/根开头就是相对默认路径(nginx prefix)下的
如何获取nginx prefix?
$ nginx -V
sudo nginx -V
Password:
nginx version: nginx/1.13.12
built by clang 9.0.0 (clang-900.0.39.2)
built with OpenSSL 1.1.0e  16 Feb 2017
TLS SNI support enabled
configure arguments: --prefix=/usr/local/Cellar/nginx/1.10.3 --with-http_ssl_module --with-pcre ...

If there are several matching location blocks nginx selects the one with the longest prefix.
nginx在多个location都匹配的时候选择的是最长路径匹配location

在将目录权限改大后还是出现403的话可以修改 user 用户 用户组，用户和组跟 location root下目录对应的用户和组一致即可

3.为了加快处理静态配置nginx使用哈希表来存储这些配置
http://nginx.org/en/docs/hash.html

在需要的时候首先考虑的是加大server_names_hash_max_size的值
Syntax:	server_names_hash_max_size size;
Default:	server_names_hash_max_size 512;
Context:	http
Sets the maximum size of the server names hash tables. 

4.nginx debug log
http://nginx.org/en/docs/debugging_log.html
http://www.360doc.com/content/12/1114/11/1073512_247759364.shtml

默认情况下nginx是没有开启debug模式的，先验证nginx -V是否有with-debug，如果没有那么进行增量编译
nginx配置是支持增量编译的，在之前编译基础上增加--with-debug，编译安装好之后用error_log指令设置debug模式

5.将nginx日志通过syslog记录到指定的服务器上
http://nginx.org/en/docs/syslog.html
http://oopsguy.com/2017/07/23/nginx-document-logging-to-syslog/

6.nginx配置单位
http://nginx.org/en/docs/syntax.html

Sizes can be specified in bytes, kilobytes (suffixes k and K) or megabytes (suffixes m and M), for example, “1024”, “8k”, “1m”.
Offsets may be also specified in gigabytes using g or G suffixes.
Time intervals can be specified in milliseconds, seconds, minutes, hours, days and so on, using the following suffixes:

ms	milliseconds
s	seconds
m	minutes
h	hours
d	days
w	weeks
M	months, 30 days
y	years, 365 days

7.nginx处理请求的过程
http://nginx.org/en/docs/http/request_processing.html

一个简单的配置php配置
server {
    listen      80;
    server_name example.org www.example.org;
    root        /data/www;

    location / {
        index   index.html index.php;
    }

    location ~* \.(gif|jpg|png)$ {
        expires 30d;
    }

    location ~ \.php$ {
        fastcgi_pass  localhost:9000;
        fastcgi_param SCRIPT_FILENAME
                      $document_root$fastcgi_script_name;
        include       fastcgi_params;
    }
}

http://nginx.org/en/docs/http/ngx_http_rewrite_module.html
~是大小写敏感匹配，~*是大小写不敏感匹配
matching of a variable against a regular expression using the “~” (for case-sensitive matching) and
“~*” (for case-insensitive matching) operators.

Negative operators “!~” and “!~*” are also available.

8.nginx同时监听多个端口
http://nginx.org/en/docs/http/server_names.html

If it is required to process requests without the “Host” header field in a server block which is not the default, 
an empty name should be specified:
server {
    listen       80;
    server_name  example.org  www.example.org  ""; # ""用于处理没有header中没有host头的请求
    ...
}

简单配置例子:
server {
    listen       80;
    listen       8080  default_server;
    server_name  example.net;
    ...
}

server {
    listen       80  default_server;
    listen       8080;
    server_name  example.org;
    ...
}

server {
    listen       80;
    server_name  example.org
                 www.example.org
                 ""
                 192.168.1.1
                 ;
    ...
}

A special wildcard name in the form “.example.org” can be used to match both the exact name 
“example.org” and the wildcard name “*.example.org”.

9.优化server name和listen配置
http://nginx.org/en/docs/http/server_names.html

If a server is the only server for a listen port, then nginx will not test server names at all 
(and will not build the hash tables for the listen port).

10.nginx负载均衡
http://nginx.org/en/docs/http/load_balancing.html

Syntax:	upstream name { ... }
Default:	—
Context:	http

Defines a group of servers. Servers can listen on different ports.
By default, requests are distributed between the servers using a weighted round-robin balancing method.

nginx支持的负载均衡方法(3种):
round-robin — requests to the application servers are distributed in a round-robin fashion,
least-connected — next request is assigned to the server with the least number of active connections,
ip-hash — a hash-function is used to determine what server should be selected for the next request (based on the client’s IP address).

http {
    upstream myapp1 {
        [round-robin|least-connected|ip-hash]
        server srv1.example.com;
        server srv2.example.com;
        server srv3.example.com;
    }

    server {
        listen 80;

        location / {
            proxy_pass http://myapp1;
        }
    }
}

proxy_pass代理转发后面url的路径如果以/结尾表示替换，如果不以/结尾表示拼接
https://blog.csdn.net/PHPService/article/details/48803235
用 http://192.168.1.1/proxy/test.html 进行访问。
第一种：
location /proxy/ {
    proxy_pass http://127.0.0.1/;
}
代理到 URL：http://127.0.0.1/test.html


第二种（相对于第一种，最后少一个 / ）
location /proxy/ {
    proxy_pass http://127.0.0.1;
}
代理到 URL：http://127.0.0.1/proxy/test.html

To configure load balancing for HTTPS instead of HTTP, just use “https” as the protocol.

如果想让一些服务器获取更多的请求可以设置权重:
 upstream myapp1 {
    server srv1.example.com weight=3;
    server srv2.example.com;
    server srv3.example.com;
}
现在有5个请求过来,3个会到srv1,剩下的两台机器各分配到1个


11.配置https服务器
http://nginx.org/en/docs/http/configuring_https_servers.html

如何知道服务器是否发送了完整的证书链？
$ openssl s_client -connect www.godaddy.com:443
If a certificate bundle has not been added, only the server certificate #0 will be shown.

ssl操作会消耗额外的CPU资源所有有必要对操作进行优化:
worker_processes auto;

http {
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    server {
        listen              443 ssl;
        server_name         www.example.com;
        keepalive_timeout   70;

        ssl_certificate     www.example.com.crt;
        ssl_certificate_key www.example.com.key;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        ...

12.nginx在监听端口唯一的时候会忽略server_name不去检查它，而同时有多个相同端口的时候才会去检查server_name，因此如果想强制对应域名对应端口才
访问相应的server的话可以这样配置:
server {
    listen 9001;
    server_name _; #表示所有请求端口是9001但是server_name跟其他server下配置的server_name都不匹配的情况
    return 404;
}

server {
    listen 9001;
    server_name xxxx.com;
    root ..;
    location / {
        index index.html index.htm;
    }
    #[...]
}

In catch-all server examples the strange name “_” can be seen:
server {
    listen       80  default_server;
    server_name  _; # 如果监听的端口80只有一个这样的配置，server_name是什么都不重要了，只有它没得选择
    return       444;
}
There is nothing special about this name, it is just one of a myriad of invalid domain names which never intersect with any real name.
Other invalid names like “--” and “!@#” may equally be used.

13. 检查一个目录的权限
namei -om /path/to/check

14. http map
http://nginx.org/en/docs/http/ngx_http_map_module.html#map

map $http_host $name {
    hostnames;

    default       0;

    example.com   1;
    *.example.com 1;
    example.org   2;
    *.example.org 2;
    .example.net  3;
    wap.*         4;
}

map $http_user_agent $mobile {
    default       0;
    "~Opera Mini" 1;
}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        ...

        location /chat/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }
    
15.可以启用sendfile on来加快数据输出(小文件)
Syntax:	sendfile on | off;
Default:	sendfile off;
Context:	http, server, location, if in location

16. nginx客户端请求缓存
http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size

Syntax:	client_body_buffer_size size;
Default:	client_body_buffer_size 8k|16k;
Context:	http, server, location

Syntax:	client_body_in_single_buffer on | off;
Default:	client_body_in_single_buffer off;
Context:	http, server, location

Syntax:	client_header_buffer_size size;
Default:	client_header_buffer_size 1k;
Context:	http, server

Syntax:	large_client_header_buffers number size;
Default:	large_client_header_buffers 4 8k;
Context:	http, server

17. 静态文件缓存
http://nginx.org/en/docs/http/ngx_http_core_module.html#open_file_cache

open_file_cache          max=1000 inactive=20s;
open_file_cache_valid    30s;
open_file_cache_min_uses 2;
open_file_cache_errors   on;

18. nginx配置基础用户密码认证
http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html

location / {
    auth_basic "need auth";
    auth_basic_user_file /usr/local/etc/nginx/in_conf/htpasswd;
    index index.html;
}

用户名密码格式
# comment
name1:password1
name2:password2:comment
name3:password3

注意保存用户名和密码的文件中密码应该加密
echo "ttlsa:$(openssl passwd -crypt 123456)\n" >> ./htpasswd

19. JSON WEB TOKEN
https://blog.csdn.net/liuwenbiao1203/article/details/52351772
http://nginx.org/en/docs/http/ngx_http_auth_jwt_module.html
https://blog.csdn.net/weiker12/article/details/68950279

20. 在发生错误的时候不要显示服务器版本号
http {
    server_tokens off;
}
http://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens

21. 优化网络传输bits和packet
http {
    sendfile on;
    tcp_nodelay on;
    tcp_nopush on;
}

22. location @name {}
http://nginx.org/en/docs/http/ngx_http_core_module.html#location

The “@” prefix defines a named location. Such a location is not used for a regular request processing, 
but instead used for request redirection. They cannot be nested, and cannot contain nested locations.

location @name是用于定义重定向请求location

23.自定义域名解析
Syntax:	resolver address ... [valid=time] [ipv6=on|off];
Default:	—
Context:	http, server, location

server {
   resolver 182.254.116.116 114.114.115.115 valid=3600s ipv6=off;
    resolver_timeout 5s;
}

使用curl测试自定义header头：
curl "127.0.0.1:8001/" -H "upstream-host:www.qq.com" -voa

24.最大用户连接数 = worker进程数 × worker连接数
即 max_clients = worker_processes * worker_connections

25.利用多核CPU，worker_cpu_affinity
For example:
worker_processes    4;
worker_cpu_affinity 0001 0010 0100 1000;

The special value auto (1.9.10) allows binding worker processes automatically to available CPUs:
worker_processes auto;
worker_cpu_affinity auto;

26.在main中定义core文件大小和存放位置，在nginx crash的时候可以记录core信息:
worker_rlimit_core  50M;
working_directory   /tmp/;

27.location匹配
1). 四种匹配方式
   = 精确匹配	
   ~ 大小写敏感正则匹配
   ~* 大小写不敏感正则匹配	
   ^~ 前缀匹配

2). location匹配指令的执行顺序	
   首先：= 精确匹配；	
   其次：^~ 前缀匹配；		
   再次：~* 和 ~ 正则匹配，顺序依据出现顺序；
   最后：如果出现正则匹配成功，则采用该正则匹配；如果无可匹配正则，则采用前缀匹配结果。
   
28. internal
http://nginx.org/en/docs/http/ngx_http_core_module.html#internal

Syntax:	internal;
Default:	—
Context:	location

Specifies that a given location can only be used for internal requests. 
For external requests, the client error 404 (Not Found) is returned.

error_page 404 /404.html;

location /404.html {
    internal;
    # ...
}

29.postpone_output
Syntax:	postpone_output size;
Default:	postpone_output 1460;
Context:	http, server, location

If possible, the transmission of client data will be postponed until nginx has at least size bytes of data to send. 
The zero value disables postponing data transmission.

postpone_output 512;

30.http请求header头合法组成为：
字母、数字、连字符(-)或者可能有下划线，下划线

在请求头中不要有下划线，这个是CGI遗留问题，预防header头映射到CGI变量时有歧义，具体：http://www.it1352.com/213499.html
This is done in order to prevent ambiguities when mapping headers to CGI variables,
as both dashes and underscores are mapped to underscores during that process.

Syntax:	ignore_invalid_headers on | off;
Default:	ignore_invalid_headers on;
Context:	http, server

Syntax:	underscores_in_headers on | off;
Default:	underscores_in_headers off;
Context:	http, server

When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and 
become subject to the ignore_invalid_headers directive.

31.长连接
https://skyao.gitbooks.io/learning-nginx/content/documentation/keep_alive.html
https://lanjingling.github.io/2016/06/11/nginx-https-keepalived-youhua/

Syntax:	keepalive_requests number;
Default:	keepalive_requests 100;
Context:	http, server, location

Syntax:	keepalive_timeout timeout [header_timeout];
Default:	keepalive_timeout 75s;
Context:	http, server, location

keepalive 这个参数一定要小心设置，尤其对于 QPS 比较高的场景，推荐先做一下估算，根据 QPS 和平均响应时间大体能计算出需要的长连接的数量。
比如 10000 QPS 和 100 毫秒响应时间就可以推算出需要的长连接数量大概是 1000. 然后将 keepalive 设置为这个长连接数量的 10% 到 30%。

32.限速
限制下载速度:
http://nginx.org/en/docs/http/ngx_http_core_module.html#limit_rate
https://www.centos.bz/2017/03/nginx-limit_rate-limit_conn-download-speed/

Syntax:	limit_rate rate;
Default:	limit_rate 0;
Context:	http, server, location, if in location

Rate limit can also be set in the $limit_rate variable. It may be useful in cases where rate should be limited depending 
on a certain condition:

server {
    if ($slow) {
        set $limit_rate 4k;
    }
    ...
}

Syntax:	limit_rate_after size;
Default:	limit_rate_after 0;
Context:	http, server, location, if in location

对于有大文件请求，比如视频、音频等，可以限制下载速度，节约带款：
location ^~ /videos/ {
    ...
    limit_rate_after 1m; //传输1m以后开始限制下载速度
    limit_rate 150k; //限制下载速度为150kb/s
    ...
}


限制连接数和限制连接速度:
http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html
http://nginx.org/en/docs/http/ngx_http_limit_req_module.html
http://www.cnblogs.com/CarpenterLee/p/8084533.html
https://segmentfault.com/a/1190000011166016

33. 延迟关闭
Syntax:	lingering_time time;
Default:	lingering_time 30s;
Context:	http, server, location

lingering_close 启用后，这个配置项对于上传大文件很有用。当用户请求的 Content-Length 大于 max_client_body_size 配置时，
Nginx 服务会立刻向用户发送 413（Request entity too large）响应。但是，很多客户端可能不管 413 返回值，仍然持续不断地上传 HTTP body，这时，
经过了 lingering_time 设置的时间后，Nginx 将不管用户是否仍在上传，都会把连接关闭掉。

Syntax:	lingering_timeout time;
Default:	lingering_timeout 5s;
Context:	http, server, location

这个参数需要根据实际情况来考虑

34.关闭不响应的连接
Syntax:	reset_timedout_connection on | off;
Default:	reset_timedout_connection off;
Context:	http, server, location

reset_timedout_connection on;

35.响应客户端超时时间，对于处理时间比较长的后台应用要注意了
Sets a timeout for transmitting a response to the client.
Syntax:	send_timeout time;
Default:	send_timeout 60s;
Context:	http, server, location

36.在响应内容之前或者之后发起子请求来追加内容
http://nginx.org/en/docs/http/ngx_http_addition_module.html

Syntax:	add_before_body uri;
Default:	—
Context:	http, server, location

可以用于特殊调试场景:
location = /xxxxx {
    internal; #只能通过内部重定向访问
    add_before_body /before_action;
    add_after_body  /after_action;
}

37.跟index相关的
http://nginx.org/en/docs/http/ngx_http_index_module.html
http://nginx.org/en/docs/http/ngx_http_random_index_module.html
http://nginx.org/en/docs/http/ngx_http_autoindex_module.html

Syntax:	random_index on | off;
Default:	random_index off;
Context:	location

Syntax:	index file ...;
Default:	index index.html;
Context:	http, server, location

location / {
    index index.$geo.html index.html; # index指令中可以包含变量
}

打开目录浏览功能,如果需要的话可以单独开启一个端口配置授权来查看
location / {
    autoindex on;
    autoindex_exact_size off;
    root /Users/dujunwen;
}

38.设置响应编码
http://nginx.org/en/docs/http/ngx_http_charset_module.html

Syntax:	charset charset | off;
Default:	charset off;
Context:	http, server, location, if in location

charset utf-8; # Adds the specified charset to the “Content-Type” response header field.

39.empty_gif 指令，开启响应 1x1 空白图片
语法:     empty_gif;
默认:     —
配置段:     location

40.default_type定义响应的Content-Type值
Syntax:	default_type mime-type;
Default:	default_type text/plain;
Context:	http, server, location

default_type text/plain; 
对应响应头：
Content-Type: text/plain

如果要设置默认为下载文件的话可以设置：
default_type  application/octet-stream

41.简单的mp4播放测试
server {
    location / {
        index index.html;
    }

    location ~ \.mp4$ {
        mp4;
        mp4_buffer_size     1m;
        mp4_max_buffer_size 5m;
    }
}

➜  data cat index.html
<html>
<video id="video" src="video.mp4" controls = "true" preload="auto"> </video>
</html>

42.fastcgi配置
http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffer_size

Syntax:	fastcgi_buffer_size size;
Default:	fastcgi_buffer_size 4k|8k;
Context:	http, server, location

Syntax:	fastcgi_buffering on | off;
Default:	fastcgi_buffering on;
Context:	http, server, location

Syntax:	fastcgi_buffers number size;
Default:	fastcgi_buffers 8 4k|8k;
Context:	http, server, location

Syntax:	fastcgi_busy_buffers_size size;
Default:	fastcgi_busy_buffers_size 8k|16k;
Context:	http, server, location

Syntax:	fastcgi_max_temp_file_size size;
Default:	fastcgi_max_temp_file_size 1024m; #响应临时文件最大为1G
Context:	http, server, location

Syntax:	client_body_buffer_size size;
Default:	client_body_buffer_size 8k|16k;
Context:	http, server, location

Syntax:	large_client_header_buffers number size;
Default:	large_client_header_buffers 4 8k;
Context:	http, server

Syntax:	fastcgi_request_buffering on | off;
Default:	fastcgi_request_buffering on;
Context:	http, server, location

Syntax:	fastcgi_intercept_errors on | off;
Default:	fastcgi_intercept_errors off; # >=300的错误是直接发送给客户端还是进行内部重定向?在开发的时候设置为off在线上设置为on
Context:	http, server, location

缓冲配置应该根据实际需求调整:
fastcgi_buffering on;
fastcgi_request_buffering on;
fastcgi_buffer_size 16k; #设置读取fastcgi响应头缓冲大小
fastcgi_buffers 16 16k; #设置响应缓冲大小
fastcgi_busy_buffers_size 32k; #设置成fastcgi_buffer_size的2倍就可以了
client_body_buffer_size 256k; #设置请求内容缓冲空间大小
client_header_buffer_size 16k; #设置请求头缓冲大小
large_client_header_buffers 16 8k; #设置额外的请求头缓冲大小


几个fastcgi相关的连接超时时间，在需要的时候可以调整数据发送和读取超时时间：
Syntax:	fastcgi_connect_timeout time;
Default:	fastcgi_connect_timeout 60s;
Context:	http, server, location

Syntax:	fastcgi_read_timeout time;
Default:	fastcgi_read_timeout 60s;
Context:	http, server, location

Syntax:	fastcgi_send_timeout time;
Default:	fastcgi_send_timeout 60s;
Context:	http, server, location

向fastcgi传递参数
http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_param

Syntax:	fastcgi_param parameter value [if_not_empty];
Default:	—
Context:	http, server, location

影响header头传递的指令还有underscores_in_headers

fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name; #/home/www/scripts/php可以用$document_root替换
fastcgi_param QUERY_STRING    $query_string;
fastcgi_param REQUEST_METHOD  $request_method;
fastcgi_param CONTENT_TYPE    $content_type;
fastcgi_param CONTENT_LENGTH  $content_length;
fastcgi_param HTTPS           $https if_not_empty;

比如php处理
location ~ \.php$ {
    include /etc/nginx/fastcgi.conf;
    try_files                   $uri  =404;
    fastcgi_pass                unix:/var/run/php-fpm.sock;
    fastcgi_index               index.php;
    fastcgi_intercept_errors    on;
    fastcgi_param APP_ENV local;
    fastcgi_param HTTPS on;
}

Syntax:	fastcgi_pass address;
Default:	—
Context:	location, if in location

fastcgi_pass localhost:9000;
fastcgi_pass unix:/tmp/fastcgi.socket;
fastcgi_pass还可以代理传递到server组

43.开启gzip压缩数据
http://nginx.org/en/docs/http/ngx_http_gzip_module.html

server {
    gzip on;
    gzip_min_length 1000;
    gzip_proxied    expired no-cache no-store private auth;
    gzip_types text/plain application/javascript text/css image/jpeg image/gif image/png; 
    gzip_vary on;
    #这里类型来自响应的Content-Type,可以根据需要添加配置,text/html总会被压缩
    gzip_disable "MSIE [1-6]\.";
    #gzip_buffers 32 4k; #先对响应数据进行评估下然后设置合理的响应缓冲
}

Syntax:	gzip_buffers number size;
Default:	gzip_buffers 32 4k|16 8k;
Context:	http, server, location


对于静态文件可以考虑使用gzip_static开启压缩
http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html

gzip_static  on;
gzip_proxied expired no-cache no-store private auth;

gzip_static生效的前提是请求目录下存在名称相同且以.gz结尾的文件，使用gzip_static压缩的话要先准备好压缩后的gz文件，并且服务器会消耗更多的空间来
存储压缩文件和原问题，这个有利有弊要自己衡量。

在linux下可以使用tar -zcvf xx.gz xx 命令来创建压缩文件
tar -zxvf xx.gz 这个是解压文件

44.如何隐藏nginx的server信息？
实现方案：重新编译源码
vim src/http/ngx_http_header_filter_module.c  # 49-50行

45.自定义记录日志
http://nginx.org/en/docs/http/ngx_http_log_module.html

map $status $loggable {
    ~^[23]  0;
    default 1;
}
access_log /path/to/access.log combined if=$loggable;

log_format compression '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $bytes_sent '
                       '"$http_referer" "$http_user_agent" "$gzip_ratio"';

access_log /spool/logs/nginx-access.log compression buffer=32k;


Syntax:	access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];
access_log off;
Default:	access_log logs/access.log combined;
Context:	http, server, location, if in location, limit_except

Syntax:	log_format name [escape=default|json|none] string ...;
Default:	log_format combined "...";
Context:	http

可以在写日志的时候加上写入缓存:buffer

46.镜像模块
http://nginx.org/en/docs/http/ngx_http_mirror_module.html
http://vinc.top/2017/08/14/nginx%E6%A8%A1%E5%9D%97ngx_http_mirror_module/
https://gitissue.com/issues/5ae0e3db10561d087f383317

利用mirror模块，可以将线上实时访问流量拷贝至其他环境，基于这些流量可以做版本发布前的预先验证，进行流量放大后的压测等等

# original配置
location / {
    mirror /mirror;
    mirror_request_body off;
    proxy_pass http://127.0.0.1:9502;
}

# mirror配置
location /mirror {
    internal;
    proxy_pass http://127.0.0.1:8081$request_uri;
    proxy_set_header X-Original-URI $request_uri;
}

47.realip，在存在反向代理的时候获取真正的ip地址
http://nginx.org/en/docs/http/ngx_http_realip_module.html
https://leo108.com/pid-2132/

首先要明确一点，realip模块生效的前提是：直接连接nginx的ip是在set_real_ip_from中指定的。
当real_ip_recursive为off时，nginx会把real_ip_header指定的HTTP头中的最后一个IP当成真实IP
当real_ip_recursive为on时，nginx会把real_ip_header指定的HTTP头中的最后一个不是信任服务器的IP当成真实IP

set_real_ip_from  192.168.1.0/24;
set_real_ip_from  192.168.2.1;
real_ip_header    X-Forwarded-For;
real_ip_recursive on;
这个配置的意思是说192.168.2.1和ip段192.168.1.0/24都是信任地址(代理服务器地址，不是真实地址)，真实地址来自于头X-Forwarded-For。

48.可以通过referers头限制访问,虽然捏造头很容易但是能添加一层限制就要添加
http://nginx.org/en/docs/http/ngx_http_referer_module.html

valid_referers none blocked server_names
               *.example.com example.* www.example.org/galleries/
               ~\.google\.;

if ($invalid_referer) {
    return 403;
}

49.下载防盗链
http://nginx.org/en/docs/http/ngx_http_secure_link_module.html
https://www.centos.bz/2018/01/nginx%E4%BD%BF%E7%94%A8secure_link%E6%A8%A1%E5%9D%97%E9%98%B2%E7%9B%97%E9%93%BE/
https://blog.csdn.net/crazyzxljing0621/article/details/72900336

location /s/ {
    secure_link $arg_md5,$arg_expires;
    secure_link_md5 "$secure_link_expires$uri$remote_addr secret";

    if ($secure_link = "") {
        return 403;
    }

    if ($secure_link = "0") {
        return 410;
    }

    ...
}

50.分流进行简单的A/B测试
http://nginx.org/en/docs/http/ngx_http_split_clients_module.html
http://blog.51cto.com/deidara/533121

http {
    split_clients "${remote_addr}AAA" $variant {
                   0.5%               .one;
                   2.0%               .two;
                   *                  "";
    }

    server {
        location / {
            index index${variant}.html;

51.nginx健康检查

52.nginx基础状态查看
http://nginx.org/en/docs/http/ngx_http_stub_status_module.html

location /basic_status {
    stub_status;
}

53.

