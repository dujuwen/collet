http://nginx.org/en/docs/
https://tengine.taobao.org/nginx_docs/cn/
https://weizhimiao.github.io/2016/10/03/Nginx%E9%85%8D%E7%BD%AE%E6%95%B4%E7%90%86/

调试nginx的时候可以将daemon设置为off
Syntax:	daemon on | off;
Default:	daemon on;
Context:	main


1.单个指令
http://nginx.org/en/docs/beginners_guide.html

nginx consists of modules which are controlled by directives specified in the configuration file. 
Directives are divided into simple directives and block directives.
A simple directive consists of the name and parameters separated by spaces and ends with a semicolon (;).
A block directive has the same structure as a simple directive, but instead of the semicolon it ends with a set of additional
instructions surrounded by braces ({ and }). If a block directive can have other directives inside braces,
it is called a context (examples: events, http, server, and location).

Directives placed in the configuration file outside of any contexts are considered to be in the main context.
The events and http directives reside in the main context, server in http, and location in server.
The rest of a line after the # sign is considered a comment.

2.获取静态资源配置
server {
    listen 80;
    server_name loc.nginx.t;

    location / {
        root  /Users/dujunwen/Desktop/test/data;
        index test.html;
    }

    location /images/ {
        root  /Users/dujunwen/Desktop/test/data;
    }
}

上面配置可以简写为:
server {
    # 默认监听的就是80端口
    server_name loc.nginx.t;
    root /Users/dujunwen/Desktop/test/data;

    location / {
        index test.html;
    }
}
现在访问图片需要输入http://loc.nginx.t/images/zan.png

在上面的基础上扩展:
server {
    server_name loc.nginx.t;
    root /Users/dujunwen/Desktop/test/data;

    location / {
        index test.html;
    }

    location ~ \.(gif|jpg|png)$ {
        root /Users/dujunwen/Desktop/test/data/images;
    }
}
现在访问图片只需要输入http://loc.nginx.t/zan.png

root指令后面指定的路径如果是以/开头那么就是从根目录下查找，如果不以/根开头就是相对默认路径(nginx prefix)下的
如何获取nginx prefix?
$ nginx -V
sudo nginx -V
Password:
nginx version: nginx/1.13.12
built by clang 9.0.0 (clang-900.0.39.2)
built with OpenSSL 1.1.0e  16 Feb 2017
TLS SNI support enabled
configure arguments: --prefix=/usr/local/Cellar/nginx/1.10.3 --with-http_ssl_module --with-pcre ...

If there are several matching location blocks nginx selects the one with the longest prefix.
nginx在多个location都匹配的时候选择的是最长路径匹配location

在将目录权限改大后还是出现403的话可以修改 user 用户 用户组，用户和组跟 location root下目录对应的用户和组一致即可

3.为了加快处理静态配置nginx使用哈希表来存储这些配置
http://nginx.org/en/docs/hash.html

在需要的时候首先考虑的是加大server_names_hash_max_size的值
那么什么时候是需要的时候呢?
可以简单的使用nginx -T | wc -l来统计 如果值大于512就可以适当的加大server_names_hash_max_size值

Syntax:	server_names_hash_max_size size;
Default:	server_names_hash_max_size 512;
Context:	http
Sets the maximum size of the server names hash tables. 

4.nginx debug log
http://nginx.org/en/docs/debugging_log.html
http://www.360doc.com/content/12/1114/11/1073512_247759364.shtml

默认情况下nginx是没有开启debug模式的，先验证nginx -V是否有with-debug，如果没有那么进行增量编译
nginx配置是支持增量编译的，在之前编译基础上增加--with-debug，编译安装好之后用error_log指令设置debug模式

5.将nginx日志通过syslog记录到指定的服务器上
http://nginx.org/en/docs/syslog.html
http://oopsguy.com/2017/07/23/nginx-document-logging-to-syslog/

6.nginx配置单位
http://nginx.org/en/docs/syntax.html

Sizes can be specified in bytes, kilobytes (suffixes k and K) or megabytes (suffixes m and M), for example, “1024”, “8k”, “1m”.
Offsets may be also specified in gigabytes using g or G suffixes.
Time intervals can be specified in milliseconds, seconds, minutes, hours, days and so on, using the following suffixes:

ms	milliseconds
s	seconds
m	minutes
h	hours
d	days
w	weeks
M	months, 30 days
y	years, 365 days

7.nginx处理请求的过程
http://nginx.org/en/docs/http/request_processing.html

一个简单的配置php配置
server {
    listen      80;
    server_name example.org www.example.org;
    root        /data/www;

    location / {
        index   index.html index.php;
    }

    location ~* \.(gif|jpg|png)$ {
        expires 30d;
    }

    location ~ \.php$ {
        fastcgi_pass  localhost:9000;
        fastcgi_param SCRIPT_FILENAME
                      $document_root$fastcgi_script_name;
        include       fastcgi_params;
    }
}

http://nginx.org/en/docs/http/ngx_http_rewrite_module.html
~是大小写敏感匹配，~*是大小写不敏感匹配
matching of a variable against a regular expression using the “~” (for case-sensitive matching) and
“~*” (for case-insensitive matching) operators.

Negative operators “!~” and “!~*” are also available.

8.nginx同时监听多个端口
http://nginx.org/en/docs/http/server_names.html

If it is required to process requests without the “Host” header field in a server block which is not the default, 
an empty name should be specified:
server {
    listen       80;
    server_name  example.org  www.example.org  ""; # ""用于处理没有header中没有host头的请求
    ...
}

简单配置例子:
server {
    listen       80;
    listen       8080  default_server;
    server_name  example.net;
    ...
}

server {
    listen       80  default_server;
    listen       8080;
    server_name  example.org;
    ...
}

server {
    listen       80;
    server_name  example.org
                 www.example.org
                 ""
                 192.168.1.1
                 ;
    ...
}

A special wildcard name in the form “.example.org” can be used to match both the exact name 
“example.org” and the wildcard name “*.example.org”.

9.优化server name和listen配置
http://nginx.org/en/docs/http/server_names.html

If a server is the only server for a listen port, then nginx will not test server names at all 
(and will not build the hash tables for the listen port).

10.nginx负载均衡
http://nginx.org/en/docs/http/load_balancing.html

Syntax:	upstream name { ... }
Default:	—
Context:	http

Defines a group of servers. Servers can listen on different ports.
By default, requests are distributed between the servers using a weighted round-robin balancing method.

nginx支持的负载均衡方法(3种):
round-robin — requests to the application servers are distributed in a round-robin fashion,
least-connected — next request is assigned to the server with the least number of active connections,
ip-hash — a hash-function is used to determine what server should be selected for the next request (based on the client’s IP address).

http {
    upstream myapp1 {
        [round-robin|least-connected|ip-hash]
        server srv1.example.com;
        server srv2.example.com;
        server srv3.example.com;
    }

    server {
        listen 80;

        location / {
            proxy_pass http://myapp1;
        }
    }
}

proxy_pass代理转发后面url的路径如果以/结尾表示替换，如果不以/结尾表示拼接
https://blog.csdn.net/PHPService/article/details/48803235
用 http://192.168.1.1/proxy/test.html 进行访问。
第一种：
location /proxy/ {
    proxy_pass http://127.0.0.1/;
}
代理到 URL：http://127.0.0.1/test.html


第二种（相对于第一种，最后少一个 / ）
location /proxy/ {
    proxy_pass http://127.0.0.1;
}
代理到 URL：http://127.0.0.1/proxy/test.html

To configure load balancing for HTTPS instead of HTTP, just use “https” as the protocol.

如果想让一些服务器获取更多的请求可以设置权重:
 upstream myapp1 {
    server srv1.example.com weight=3;
    server srv2.example.com;
    server srv3.example.com;
}
现在有5个请求过来,3个会到srv1,剩下的两台机器各分配到1个


11.配置https服务器
http://nginx.org/en/docs/http/configuring_https_servers.html

如何知道服务器是否发送了完整的证书链？
$ openssl s_client -connect www.godaddy.com:443
If a certificate bundle has not been added, only the server certificate #0 will be shown.

ssl操作会消耗额外的CPU资源所有有必要对操作进行优化:
worker_processes auto;

http {
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    server {
        listen              443 ssl;
        server_name         www.example.com;
        keepalive_timeout   70;

        ssl_certificate     www.example.com.crt;
        ssl_certificate_key www.example.com.key;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        ...

12.nginx在监听端口唯一的时候会忽略server_name不去检查它，而同时有多个相同端口的时候才会去检查server_name，因此如果想强制对应域名对应端口才
访问相应的server的话可以这样配置:
server {
    listen 9001;
    server_name _; #表示所有请求端口是9001但是server_name跟其他server下配置的server_name都不匹配的情况
    return 404;
}

server {
    listen 9001;
    server_name xxxx.com;
    root ..;
    location / {
        index index.html index.htm;
    }
    #[...]
}

In catch-all server examples the strange name “_” can be seen:
server {
    listen       80  default_server;
    server_name  _; # 如果监听的端口80只有一个这样的配置，server_name是什么都不重要了，只有它没得选择
    return       444;
}
There is nothing special about this name, it is just one of a myriad of invalid domain names which never intersect with any real name.
Other invalid names like “--” and “!@#” may equally be used.

13. 检查一个目录的权限
namei -om /path/to/check

14. http map
http://nginx.org/en/docs/http/ngx_http_map_module.html#map

map $http_host $name {
    hostnames;

    default       0;

    example.com   1;
    *.example.com 1;
    example.org   2;
    *.example.org 2;
    .example.net  3;
    wap.*         4;
}

map $http_user_agent $mobile {
    default       0;
    "~Opera Mini" 1;
}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        ...

        location /chat/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }
    
15.可以启用sendfile on来加快数据输出(小文件)
Syntax:	sendfile on | off;
Default:	sendfile off;
Context:	http, server, location, if in location

16. nginx客户端请求缓存
http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size

Syntax:	client_body_buffer_size size;
Default:	client_body_buffer_size 8k|16k;
Context:	http, server, location

Syntax:	client_body_in_single_buffer on | off;
Default:	client_body_in_single_buffer off;
Context:	http, server, location

Syntax:	client_header_buffer_size size;
Default:	client_header_buffer_size 1k;
Context:	http, server

Syntax:	large_client_header_buffers number size;
Default:	large_client_header_buffers 4 8k;
Context:	http, server

17. 静态文件缓存
http://nginx.org/en/docs/http/ngx_http_core_module.html#open_file_cache

open_file_cache          max=1000 inactive=20s;
open_file_cache_valid    30s;
open_file_cache_min_uses 2;
open_file_cache_errors   on;

18. nginx配置基础用户密码认证
http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html

location / {
    auth_basic "need auth";
    auth_basic_user_file /usr/local/etc/nginx/in_conf/htpasswd;
    index index.html;
}

用户名密码格式
# comment
name1:password1
name2:password2:comment
name3:password3

注意保存用户名和密码的文件中密码应该加密
echo "ttlsa:$(openssl passwd -crypt 123456)\n" >> ./htpasswd

19. JSON WEB TOKEN
https://blog.csdn.net/liuwenbiao1203/article/details/52351772
http://nginx.org/en/docs/http/ngx_http_auth_jwt_module.html
https://blog.csdn.net/weiker12/article/details/68950279

20. 在发生错误的时候不要显示服务器版本号
http {
    server_tokens off;
}
http://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens

21. 优化网络传输bits和packet
http {
    sendfile on;
    tcp_nodelay on;
    tcp_nopush on;
}

22. location @name {}
http://nginx.org/en/docs/http/ngx_http_core_module.html#location

The “@” prefix defines a named location. Such a location is not used for a regular request processing, 
but instead used for request redirection. They cannot be nested, and cannot contain nested locations.

location @name是用于定义重定向请求location

23.自定义域名解析
Syntax:	resolver address ... [valid=time] [ipv6=on|off];
Default:	—
Context:	http, server, location

server {
   resolver 182.254.116.116 114.114.115.115 valid=3600s ipv6=off;
    resolver_timeout 5s;
}

使用curl测试自定义header头：
curl "127.0.0.1:8001/" -H "upstream-host:www.qq.com" -voa

24.最大用户连接数 = worker进程数 × worker连接数
即 max_clients = worker_processes * worker_connections

25.利用多核CPU，worker_cpu_affinity
For example:
worker_processes    4;
worker_cpu_affinity 0001 0010 0100 1000;

The special value auto (1.9.10) allows binding worker processes automatically to available CPUs:
worker_processes auto;
worker_cpu_affinity auto;

26.在main中定义core文件大小和存放位置，在nginx crash的时候可以记录core信息:
worker_rlimit_core  50M;
working_directory   /tmp/;

27.location匹配
1). 四种匹配方式
   = 精确匹配	
   ~ 大小写敏感正则匹配
   ~* 大小写不敏感正则匹配	
   ^~ 前缀匹配

2). location匹配指令的执行顺序	
   首先：= 精确匹配；	
   其次：^~ 前缀匹配；		
   再次：~* 和 ~ 正则匹配，顺序依据出现顺序；
   最后：如果出现正则匹配成功，则采用该正则匹配；如果无可匹配正则，则采用前缀匹配结果。
   
28. internal
http://nginx.org/en/docs/http/ngx_http_core_module.html#internal

Syntax:	internal;
Default:	—
Context:	location

Specifies that a given location can only be used for internal requests. 
For external requests, the client error 404 (Not Found) is returned.

error_page 404 /404.html;

location /404.html {
    internal;
    # ...
}

29.postpone_output
Syntax:	postpone_output size;
Default:	
postpone_output 1460;
Context:	http, server, location

If possible, the transmission of client data will be postponed until nginx has at least size bytes of data to send. 
The zero value disables postponing data transmission.

postpone_output 512;

30.
